// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingBox
#include <ChartingBox.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_SectionRender
#include <SectionRender.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c8186eee1bd9a607_53_new,"ChartingState","new",0x5e894bff,"ChartingState.new","ChartingState.hx",53,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_144_create,"ChartingState","create",0xe351b8bd,"ChartingState.create","ChartingState.hx",144,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_465_regenerateLines,"ChartingState","regenerateLines",0x6a7da516,"ChartingState.regenerateLines","ChartingState.hx",465,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_524_addGrid,"ChartingState","addGrid",0x736e50a6,"ChartingState.addGrid","ChartingState.hx",524,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_567_containsName,"ChartingState","containsName",0x8c788c8b,"ChartingState.containsName","ChartingState.hx",567,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_603_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",603,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_677_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",677,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_756_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",756,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_839_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",839,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_896_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",896,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_915_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",915,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_920_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",920,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_924_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",924,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_583_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",583,0xd9647851)
static const ::String _hx_array_data_9bdde08d_32[] = {
	HX_("BPM Change",d1,e8,85,d1),HX_("Scroll Speed Change",fc,2c,18,61),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_971_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",971,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_977_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",977,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_991_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",991,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_964_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",964,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1012_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1012,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1018_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1018,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1023_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1023,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1028_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1028,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1033_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1033,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1089_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1089,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1099_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1099,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1107_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1107,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1115_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1115,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1123_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1123,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1131_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1131,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1003_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1003,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1205_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1205,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1211_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1211,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1245_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1245,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1282_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1282,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1293_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1293,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1195_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1195,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1321_goToSection,"ChartingState","goToSection",0x859ef101,"ChartingState.goToSection","ChartingState.hx",1321,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1357_addNoteUI,"ChartingState","addNoteUI",0x01b274a6,"ChartingState.addNoteUI","ChartingState.hx",1357,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1343_addNoteUI,"ChartingState","addNoteUI",0x01b274a6,"ChartingState.addNoteUI","ChartingState.hx",1343,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1400_pasteNotesFromArray,"ChartingState","pasteNotesFromArray",0x6ce427a0,"ChartingState.pasteNotesFromArray","ChartingState.hx",1400,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1506_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",1506,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1454_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",1454,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1515_generateUI,"ChartingState","generateUI",0x13f5670a,"ChartingState.generateUI","ChartingState.hx",1515,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1535_getEvent,"ChartingState","getEvent",0x4f66dba5,"ChartingState.getEvent","ChartingState.hx",1535,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1669_poggers,"ChartingState","poggers",0x186dfa06,"ChartingState.poggers","ChartingState.hx",1669,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1738_stepStartTime,"ChartingState","stepStartTime",0xba6fcd02,"ChartingState.stepStartTime","ChartingState.hx",1738,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1742_sectionStartTime,"ChartingState","sectionStartTime",0x9b4027eb,"ChartingState.sectionStartTime","ChartingState.hx",1742,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1770_resizeEverything,"ChartingState","resizeEverything",0xa26a0e88,"ChartingState.resizeEverything","ChartingState.hx",1770,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1792_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",1792,0xd9647851)
static const bool _hx_array_data_9bdde08d_118[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2313_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",2313,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2423_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",2423,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2657_changeNoteSustain,"ChartingState","changeNoteSustain",0x9b3f5f20,"ChartingState.changeNoteSustain","ChartingState.hx",2657,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2684_resetSection,"ChartingState","resetSection",0xb8b9e457,"ChartingState.resetSection","ChartingState.hx",2684,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2704_changeSection,"ChartingState","changeSection",0xb8ce82b4,"ChartingState.changeSection","ChartingState.hx",2704,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2739_copySection,"ChartingState","copySection",0xd085354f,"ChartingState.copySection","ChartingState.hx",2739,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2758_updateSectionUI,"ChartingState","updateSectionUI",0x006c124f,"ChartingState.updateSectionUI","ChartingState.hx",2758,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2777_updateHeads,"ChartingState","updateHeads",0x26e9ef29,"ChartingState.updateHeads","ChartingState.hx",2777,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2791_updateNoteUI,"ChartingState","updateNoteUI",0x1a7d0230,"ChartingState.updateNoteUI","ChartingState.hx",2791,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2805_updateGrid,"ChartingState","updateGrid",0xc2b587b0,"ChartingState.updateGrid","ChartingState.hx",2805,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2874_addSection,"ChartingState","addSection",0x8af6f805,"ChartingState.addSection","ChartingState.hx",2874,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2908_selectNote,"ChartingState","selectNote",0x7d3a534f,"ChartingState.selectNote","ChartingState.hx",2908,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2952_deleteNote,"ChartingState","deleteNote",0x61ebbbfe,"ChartingState.deleteNote","ChartingState.hx",2952,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2996_clearSection,"ChartingState","clearSection",0x225a5059,"ChartingState.clearSection","ChartingState.hx",2996,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3003_clearSong,"ChartingState","clearSong",0xd7f188e1,"ChartingState.clearSong","ChartingState.hx",3003,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3013_newSection,"ChartingState","newSection",0x606eefa6,"ChartingState.newSection","ChartingState.hx",3013,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3056_recalculateAllSectionTimes,"ChartingState","recalculateAllSectionTimes",0xbe1ad090,"ChartingState.recalculateAllSectionTimes","ChartingState.hx",3056,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3080_shiftNotes,"ChartingState","shiftNotes",0x74b78ea0,"ChartingState.shiftNotes","ChartingState.hx",3080,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3130_getSectionByTime,"ChartingState","getSectionByTime",0x743e0fd4,"ChartingState.getSectionByTime","ChartingState.hx",3130,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3151_getNoteByTime,"ChartingState","getNoteByTime",0x06f3c7ab,"ChartingState.getNoteByTime","ChartingState.hx",3151,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3164_addNote,"ChartingState","addNote",0x780c91d2,"ChartingState.addNote","ChartingState.hx",3164,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3260_getStrumTime,"ChartingState","getStrumTime",0xec7b6301,"ChartingState.getStrumTime","ChartingState.hx",3260,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3265_getYfromStrum,"ChartingState","getYfromStrum",0x7268247b,"ChartingState.getYfromStrum","ChartingState.hx",3265,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3295_loadLevel,"ChartingState","loadLevel",0xa572de5d,"ChartingState.loadLevel","ChartingState.hx",3295,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3299_getNotes,"ChartingState","getNotes",0x796cefcc,"ChartingState.getNotes","ChartingState.hx",3299,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3311_loadJson,"ChartingState","loadJson",0x30d3176f,"ChartingState.loadJson","ChartingState.hx",3311,0xd9647851)
static const ::String _hx_array_data_9bdde08d_173[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3323_loadAutosave,"ChartingState","loadAutosave",0xe706d2f3,"ChartingState.loadAutosave","ChartingState.hx",3323,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3329_autosaveSong,"ChartingState","autosaveSong",0x50afbca2,"ChartingState.autosaveSong","ChartingState.hx",3329,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3337_saveLevel,"ChartingState","saveLevel",0x18e899e6,"ChartingState.saveLevel","ChartingState.hx",3337,0xd9647851)
static const ::String _hx_array_data_9bdde08d_177[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3356_onSaveComplete,"ChartingState","onSaveComplete",0x9fbb2796,"ChartingState.onSaveComplete","ChartingState.hx",3356,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3368_onSaveCancel,"ChartingState","onSaveCancel",0xc234b317,"ChartingState.onSaveCancel","ChartingState.hx",3368,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3379_onSaveError,"ChartingState","onSaveError",0x40b268cb,"ChartingState.onSaveError","ChartingState.hx",3379,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_68_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",68,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_69_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",69,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_82_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",82,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_141_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",141,0xd9647851)

void ChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_53_new)
HXLINE(3291)		this->daSpacing = ((Float)0.3);
HXLINE(3161)		this->curSelectedNoteObject = null();
HXLINE(1789)		this->lastAction = HX_("",00,00,00,00);
HXLINE(1787)		this->selectInitialY = ((Float)0);
HXLINE(1786)		this->selectInitialX = ((Float)0);
HXLINE(1784)		this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1783)		this->pastedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1782)		this->copiedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1779)		this->waitingForRelease = false;
HXLINE(1775)		this->snapSelection = 3;
HXLINE(1773)		this->shownNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1765)		this->lastUpdatedSection = null();
HXLINE(1764)		this->updateFrame = 0;
HXLINE(1762)		this->lastBPM = ((Float)0);
HXLINE(1761)		this->currentBPM = ((Float)0);
HXLINE(1759)		this->changeIndex = 0;
HXLINE(1757)		this->diff = ((Float)0);
HXLINE(1755)		this->doSnapShit = false;
HXLINE(1754)		this->writingNotes = false;
HXLINE(1657)		this->updatedSection = false;
HXLINE( 580)		this->Typeables = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 578)		this->chartEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 564)		this->currentEventPosition = ((Float)0);
HXLINE( 563)		this->savedValue = HX_("100",71,58,25,00);
HXLINE( 562)		this->savedType = HX_("BPM Change",d1,e8,85,d1);
HXLINE( 561)		this->currentSelectedEventName = HX_("",00,00,00,00);
HXLINE( 133)		this->claps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 125)		this->height = 0;
HXLINE( 121)		this->player1 =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("bf",c4,55,00,00));
HXLINE( 120)		this->player2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("dad",47,36,4c,00),null());
HXLINE( 116)		this->tempBpm = ((Float)0);
HXLINE(  96)		this->defaultSnap = true;
HXLINE(  95)		this->subDivisions = ((Float)1);
HXLINE(  93)		this->GRID_SIZE = 40;
HXLINE(  88)		this->amountSteps = 0;
HXLINE(  87)		this->curSong = HX_("Dad Battle",31,46,15,16);
HXLINE(  80)		this->curSection = 0;
HXLINE(  74)		this->zoomFactor = ((Float)0.4);
HXLINE(  73)		this->beatsShown = ((Float)1);
HXLINE(  71)		this->speed = ((Float)1.0);
HXLINE(  63)		this->deezNuts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  61)		this->snap = 16;
HXLINE(  59)		this->playClaps = false;
HXLINE(  53)		super::__construct(TransIn,TransOut);
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x7824f5cd || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_144_create)
HXLINE( 145)		this->curSection = ::ChartingState_obj::lastSection;
HXLINE( 149)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 151)		::ChartingState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 153)		this->deezNuts->set(4,1);
HXLINE( 154)		this->deezNuts->set(8,2);
HXLINE( 155)		this->deezNuts->set(12,3);
HXLINE( 156)		this->deezNuts->set(16,4);
HXLINE( 157)		this->deezNuts->set(24,6);
HXLINE( 158)		this->deezNuts->set(32,8);
HXLINE( 159)		this->deezNuts->set(64,16);
HXLINE( 162)		this->sectionRenderes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 163)		this->lines =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 164)		this->texts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 166)		::TimingStruct_obj::clearTimings();
HXLINE( 171)		if (::hx::IsNotNull( ::PlayState_obj::SONG )) {
HXLINE( 173)			if (::PlayState_obj::isSM) {
HXLINE( 174)				::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJsonRAW(::sys::io::File_obj::getContent((::PlayState_obj::pathToSm + HX_("/converted.json",73,2b,b3,66)))));
            			}
            			else {
HXLINE( 177)				::String songFormat = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 178)				::String _hx_switch_0 = songFormat;
            				if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE( 179)					songFormat = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN( 179)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE( 180)					songFormat = HX_("Philly",48,eb,f2,23);
HXDLIN( 180)					goto _hx_goto_1;
            				}
            				_hx_goto_1:;
HXLINE( 183)				::String poop = ::Highscore_obj::formatSong(songFormat,::PlayState_obj::storyDifficulty);
HXLINE( 185)				::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJson(poop,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) )));
            			}
            		}
            		else {
HXLINE( 190)			::ChartingState_obj::_song =  ::Dynamic(::hx::Anon_obj::Create(13)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(5,HX_("noteStyle",df,ef,aa,c1),HX_("normal",27,72,69,30))
            				->setFixed(6,HX_("validScore",b6,dc,18,c7),false)
            				->setFixed(7,HX_("chartVersion",da,e9,39,c8),::ChartingState_obj::latestChartVersion)
            				->setFixed(8,HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00))
            				->setFixed(9,HX_("bpm",df,be,4a,00),( (Float)(150) ))
            				->setFixed(10,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(11,HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(12,HX_("song",d5,23,58,4c),HX_("Test",72,f4,d2,37)));
            		}
HXLINE( 207)		this->addGrid(1);
HXLINE( 209)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("chartVersion",da,e9,39,c8),::hx::paccDynamic) )) {
HXLINE( 210)			::ChartingState_obj::_song->__SetField(HX_("chartVersion",da,e9,39,c8),HX_("2",32,00,00,00),::hx::paccDynamic);
            		}
HXLINE( 219)		this->snapText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,60,10,0,HX_("",00,00,00,00),14,null());
HXLINE( 220)		this->snapText->scrollFactor->set(null(),null());
HXLINE( 223)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 224)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 226)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 228)		this->tempBpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 230)		this->addSection(null());
HXLINE( 234)		this->loadSong(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 235)		::Conductor_obj::changeBPM(( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 236)		::Conductor_obj::mapBPMChanges(::ChartingState_obj::_song);
HXLINE( 238)		::ChartingState_obj::leftIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 239)		::ChartingState_obj::rightIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 241)		int index = 0;
HXLINE( 243)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 244)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 246)		if ((( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length == 0)) {
HXLINE( 247)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 252)		int currentIndex = 0;
HXLINE( 253)		{
HXLINE( 253)			int _g = 0;
HXDLIN( 253)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 253)			while((_g < _g1->length)){
HXLINE( 253)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 253)				_g = (_g + 1);
HXLINE( 255)				 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 256)				::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 257)				Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 258)				Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 260)				if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 262)					Float beat = pos;
HXLINE( 264)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 266)					::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 268)					if ((currentIndex != 0)) {
HXLINE( 270)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 271)						data->endBeat = beat;
HXLINE( 272)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 273)						Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 274)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 275)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE( 278)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 282)		 ::TimingStruct lastSeg = ::TimingStruct_obj::AllTimings->__get((::TimingStruct_obj::AllTimings->length - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 284)		{
HXLINE( 284)			int _g2 = 0;
HXDLIN( 284)			int _g3 = ::TimingStruct_obj::AllTimings->length;
HXDLIN( 284)			while((_g2 < _g3)){
HXLINE( 284)				_g2 = (_g2 + 1);
HXDLIN( 284)				int i = (_g2 - 1);
HXLINE( 286)				 ::TimingStruct seg = ::TimingStruct_obj::AllTimings->__get(i).StaticCast<  ::TimingStruct >();
HXLINE( 287)				if ((i == (::TimingStruct_obj::AllTimings->length - 1))) {
HXLINE( 288)					lastSeg = seg;
            				}
            			}
            		}
HXLINE( 294)		this->recalculateAllSectionTimes();
HXLINE( 296)		this->poggers();
HXLINE( 301)		{
HXLINE( 301)			int _g4 = 0;
HXDLIN( 301)			while((_g4 < 9000000)){
HXLINE( 301)				_g4 = (_g4 + 1);
HXDLIN( 301)				int i = (_g4 - 1);
HXLINE( 303)				 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(i) ));
HXLINE( 306)				Float start = ((( (Float)(i) ) - seg->startBeat) / (seg->bpm / ( (Float)(60) )));
HXLINE( 308)				Float time = ((seg->startTime + start) * ( (Float)(1000) ));
HXLINE( 310)				if ((time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 311)					goto _hx_goto_4;
            				}
HXLINE( 313)				::ChartingState_obj::lengthInBeats = ( (Float)(i) );
            			}
            			_hx_goto_4:;
            		}
HXLINE( 316)		::ChartingState_obj::lengthInSteps = (::ChartingState_obj::lengthInBeats * ( (Float)(4) ));
HXLINE( 320)		int sections = ::Math_obj::floor(((::ChartingState_obj::lengthInSteps + 16) / ( (Float)(16) )));
HXLINE( 322)		Float targetY = this->getYfromStrum(::flixel::FlxG_obj::sound->music->_length);
HXLINE( 326)		{
HXLINE( 326)			int _g5 = 0;
HXDLIN( 326)			int _g6 = (::Math_obj::round((targetY / ( (Float)(640) ))) + 1920);
HXDLIN( 326)			while((_g5 < _g6)){
HXLINE( 326)				_g5 = (_g5 + 1);
HXDLIN( 326)				int awfgaw = (_g5 - 1);
HXLINE( 328)				 ::SectionRender renderer =  ::SectionRender_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)((640 * awfgaw)) ),this->GRID_SIZE,null());
HXLINE( 329)				if (::hx::IsNull(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw) )) {
HXLINE( 330)					::Array< ::Dynamic> _hx_tmp = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 330)					_hx_tmp->push(this->newSection(16,true,false,false));
            				}
HXLINE( 331)				renderer->section =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw);
HXLINE( 333)				this->sectionRenderes->add(renderer).StaticCast<  ::SectionRender >();
HXLINE( 335)				Float down = this->getYfromStrum(( (Float)(renderer->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ));
HXDLIN( 335)				Float down1 = (down * this->zoomFactor);
HXLINE( 337)				 ::flixel::FlxSprite sectionicon;
HXDLIN( 337)				if (( (bool)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 337)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
            				else {
HXLINE( 337)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
HXLINE( 338)				sectionicon->set_x(( (Float)(-95) ));
HXLINE( 339)				sectionicon->set_y((down1 - ( (Float)(75) )));
HXLINE( 340)				sectionicon->setGraphicSize(0,45);
HXLINE( 342)				renderer->icon = sectionicon;
HXLINE( 343)				renderer->lastUpdated = ( (bool)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE( 345)				this->add(sectionicon);
HXLINE( 346)				this->height = ::Math_obj::floor(renderer->y);
            			}
            		}
HXLINE( 353)		Float _hx_tmp = (this->gridBG->get_width() / ( (Float)(2) ));
HXDLIN( 353)		this->gridBlackLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp,null(),null())->makeGraphic(2,this->height,-16777216,null(),null());
HXLINE( 359)		::ChartingState_obj::leftIcon->setGraphicSize(0,45);
HXLINE( 360)		::ChartingState_obj::rightIcon->setGraphicSize(0,45);
HXLINE( 362)		this->add(::ChartingState_obj::leftIcon);
HXLINE( 363)		this->add(::ChartingState_obj::rightIcon);
HXLINE( 365)		::ChartingState_obj::leftIcon->setPosition(0,-100);
HXLINE( 366)		 ::HealthIcon _hx_tmp1 = ::ChartingState_obj::rightIcon;
HXDLIN( 366)		_hx_tmp1->setPosition((this->gridBG->get_width() / ( (Float)(2) )),-100);
HXLINE( 368)		::ChartingState_obj::leftIcon->scrollFactor->set(null(),null());
HXLINE( 369)		::ChartingState_obj::rightIcon->scrollFactor->set(null(),null());
HXLINE( 371)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1000,50,0,HX_("",00,00,00,00),16,null());
HXLINE( 372)		this->bpmTxt->scrollFactor->set(null(),null());
HXLINE( 373)		this->add(this->bpmTxt);
HXLINE( 375)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 375)		this->strumLine = _hx_tmp2->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,null(),null(),null());
HXLINE( 377)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(this->GRID_SIZE,this->GRID_SIZE,null(),null(),null());
HXLINE( 378)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Data",55,ca,2e,d8))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section Data",85,da,d0,2d))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note Data",18,cd,41,e6))))->init(3, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Assets",a3,bc,97,80))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Assets",a3,bc,97,80))));
HXLINE( 385)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 387)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 388)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 389)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 390)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 392)		::Array< ::Dynamic> opt_tabs = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Options",3e,5b,4f,ad))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Options",13,6c,3f,84))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Events",39,c3,fe,ca))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Events",04,64,1b,cd))));
HXLINE( 394)		this->UI_options =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),opt_tabs,null(),true,null(),null());
HXLINE( 396)		this->UI_options->scrollFactor->set(null(),null());
HXLINE( 397)		this->UI_options->set_selected_tab(0);
HXLINE( 398)		this->UI_options->resize(( (Float)(300) ),( (Float)(200) ));
HXLINE( 399)		this->UI_options->set_x(this->UI_box->x);
HXLINE( 400)		this->UI_options->set_y(( (Float)((::flixel::FlxG_obj::height - 300)) ));
HXLINE( 401)		this->add(this->UI_options);
HXLINE( 402)		this->add(this->UI_box);
HXLINE( 405)		this->addSongUI();
HXLINE( 406)		this->addSectionUI();
HXLINE( 407)		this->addNoteUI();
HXLINE( 409)		this->addOptionsUI();
HXLINE( 410)		this->addEventsUI();
HXLINE( 412)		this->regenerateLines();
HXLINE( 415)		this->updateGrid();
HXLINE( 421)		this->add(this->sectionRenderes);
HXLINE( 439)		this->add(this->dummyArrow);
HXLINE( 440)		this->add(this->strumLine);
HXLINE( 441)		this->add(this->lines);
HXLINE( 442)		this->add(this->texts);
HXLINE( 443)		this->add(this->gridBlackLine);
HXLINE( 444)		this->add(this->curRenderedNotes);
HXLINE( 445)		this->add(this->curRenderedSustains);
HXLINE( 446)		this->selectedBoxes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 448)		this->add(this->selectedBoxes);
HXLINE( 453)		this->add(this->snapText);
HXLINE( 459)		this->super::create();
            	}


void ChartingState_obj::regenerateLines(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_465_regenerateLines)
HXLINE( 466)		while((this->lines->members->get_length() > 0)){
HXLINE( 468)			Dynamic( this->lines->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->destroy();
HXLINE( 469)			this->lines->members->remove(Dynamic( this->lines->members->__get(0)).StaticCast<  ::flixel::FlxSprite >());
            		}
HXLINE( 472)		while((this->texts->members->get_length() > 0)){
HXLINE( 474)			Dynamic( this->texts->members->__get(0)).StaticCast<  ::flixel::text::FlxText >()->destroy();
HXLINE( 475)			this->texts->members->remove(Dynamic( this->texts->members->__get(0)).StaticCast<  ::flixel::text::FlxText >());
            		}
HXLINE( 479)		if (::hx::IsNotNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 480)			int _g = 0;
HXDLIN( 480)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 480)			while((_g < _g1->length)){
HXLINE( 480)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 480)				_g = (_g + 1);
HXLINE( 482)				 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(i->position);
HXLINE( 484)				Float posi = ( (Float)(0) );
HXLINE( 486)				if (::hx::IsNotNull( seg )) {
HXLINE( 488)					Float start = ((i->position - seg->startBeat) / (seg->bpm / ( (Float)(60) )));
HXLINE( 490)					posi = (seg->startTime + start);
            				}
HXLINE( 493)				Float pos = this->getYfromStrum((posi * ( (Float)(1000) )));
HXDLIN( 493)				Float pos1 = (pos * this->zoomFactor);
HXLINE( 495)				if ((pos1 < 0)) {
HXLINE( 496)					pos1 = ( (Float)(0) );
            				}
HXLINE( 498)				::String type = i->type;
HXLINE( 500)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,-190,pos1,0,((((i->name + HX_("\n",0a,00,00,00)) + type) + HX_("\n",0a,00,00,00)) + i->value),12,null());
HXLINE( 501)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,pos1,null());
HXDLIN( 501)				 ::flixel::FlxSprite line1 = line->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,-16776961,null(),null());
HXLINE( 503)				line1->set_alpha(((Float)0.2));
HXLINE( 505)				this->lines->add(line1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 506)				this->texts->add(text).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 508)				this->add(line1);
HXLINE( 509)				this->add(text);
            			}
            		}
HXLINE( 512)		{
HXLINE( 512)			 ::Dynamic filter = null();
HXDLIN( 512)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->sectionRenderes->members,filter);
HXDLIN( 512)			while(i->hasNext()){
HXLINE( 512)				 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE( 514)				Float pos = this->getYfromStrum(( (Float)(i1->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ));
HXDLIN( 514)				Float pos1 = (pos * this->zoomFactor);
HXLINE( 515)				i1->icon->set_y((pos1 - ( (Float)(75) )));
HXLINE( 517)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,pos1,null());
HXDLIN( 517)				 ::flixel::FlxSprite line1 = line->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,-16777216,null(),null());
HXLINE( 518)				line1->set_alpha(((Float)0.4));
HXLINE( 519)				this->lines->add(line1).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,regenerateLines,(void))

void ChartingState_obj::addGrid( ::Dynamic __o_divisions){
            		 ::Dynamic divisions = __o_divisions;
            		if (::hx::IsNull(__o_divisions)) divisions = 1;
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_524_addGrid)
HXLINE( 526)		Float h = (( (Float)(this->GRID_SIZE) ) / ( (Float)(divisions) ));
HXLINE( 527)		if ((::Math_obj::floor(h) != h)) {
HXLINE( 528)			h = ( (Float)(this->GRID_SIZE) );
            		}
HXLINE( 530)		this->remove(this->gridBG,null());
HXLINE( 531)		int _hx_tmp = this->GRID_SIZE;
HXDLIN( 531)		int _hx_tmp1 = ::Std_obj::_hx_int(h);
HXDLIN( 531)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(_hx_tmp,_hx_tmp1,(this->GRID_SIZE * 8),(this->GRID_SIZE * 16),null(),null(),null());
HXLINE( 548)		int totalHeight = 0;
HXLINE( 553)		this->remove(this->gridBlackLine,null());
HXLINE( 554)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->get_width() / ( (Float)(2) )),null(),null());
HXDLIN( 554)		this->gridBlackLine = _hx_tmp2->makeGraphic(2,::Std_obj::_hx_int(( (Float)(::Math_obj::floor(::ChartingState_obj::lengthInSteps)) )),-16777216,null(),null());
HXLINE( 555)		this->add(this->gridBlackLine);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addGrid,(void))

 ::Event ChartingState_obj::containsName(::String name,::Array< ::Dynamic> events){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_567_containsName)
HXLINE( 568)		{
HXLINE( 568)			int _g = 0;
HXDLIN( 568)			while((_g < events->length)){
HXLINE( 568)				 ::Event i = events->__get(_g).StaticCast<  ::Event >();
HXDLIN( 568)				_g = (_g + 1);
HXLINE( 570)				::String thisName = ( (::String)(::Reflect_obj::field(i,HX_("name",4b,72,ff,48))) );
HXLINE( 572)				if ((thisName == name)) {
HXLINE( 573)					return i;
            				}
            			}
            		}
HXLINE( 575)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,containsName,return )

void ChartingState_obj::addEventsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_603_addEventsUI)
HXLINE( 604)			::String _gthis1 = _gthis->currentSelectedEventName;
HXDLIN( 604)			Float _gthis2 = _gthis->currentEventPosition;
HXDLIN( 604)			Float pog = ::HelperFunctions_obj::truncateFloat(::Std_obj::parseFloat(_gthis->savedValue),3);
HXDLIN( 604)			 ::Event pog1 =  ::Event_obj::__alloc( HX_CTX ,_gthis1,_gthis2,pog,_gthis->savedType);
HXLINE( 608)			 ::Event obj = _gthis->containsName(pog1->name,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 611)			if ((pog1->name == HX_("",00,00,00,00))) {
HXLINE( 612)				return;
            			}
HXLINE( 616)			if (::hx::IsNotNull( obj )) {
HXLINE( 617)				( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->remove(obj);
            			}
HXLINE( 618)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->push(pog1);
HXLINE( 622)			::TimingStruct_obj::clearTimings();
HXLINE( 624)			int currentIndex = 0;
HXLINE( 625)			{
HXLINE( 625)				int _g = 0;
HXDLIN( 625)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 625)				while((_g < _g1->length)){
HXLINE( 625)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 625)					_g = (_g + 1);
HXLINE( 627)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 628)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 629)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 630)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 633)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 635)						Float beat = pos;
HXLINE( 637)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 639)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 641)						if ((currentIndex != 0)) {
HXLINE( 643)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 644)							data->endBeat = beat;
HXLINE( 645)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 646)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 647)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 648)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 651)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 655)			if ((pog1->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 657)				_gthis->recalculateAllSectionTimes();
HXLINE( 658)				_gthis->poggers();
            			}
HXLINE( 661)			_gthis->regenerateLines();
HXLINE( 663)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 665)			{
HXLINE( 665)				int _g2_current = 0;
HXDLIN( 665)				::Array< ::Dynamic> _g2_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 665)				while((_g2_current < _g2_array->length)){
HXLINE( 665)					 ::Event _g3_value = _g2_array->__get(_g2_current).StaticCast<  ::Event >();
HXDLIN( 665)					_g2_current = (_g2_current + 1);
HXDLIN( 665)					int _g3_key = (_g2_current - 1);
HXDLIN( 665)					int key = _g3_key;
HXDLIN( 665)					 ::Event value = _g3_value;
HXLINE( 666)					listofnames->push(value->name);
            				}
            			}
HXLINE( 669)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis3 = _gthis->listOfEvents;
HXDLIN( 669)			_gthis3->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 671)			_gthis->listOfEvents->set_selectedLabel(pog1->name);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_677_addEventsUI)
HXLINE( 679)			::String pog = (HX_("New Event ",c6,9a,0f,64) + ::HelperFunctions_obj::truncateFloat(_gthis->curDecimalBeat,3));
HXDLIN( 679)			Float pog1 = ::HelperFunctions_obj::truncateFloat(_gthis->curDecimalBeat,3);
HXDLIN( 679)			 ::Event pog2 =  ::Event_obj::__alloc( HX_CTX ,pog,pog1,( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1));
HXLINE( 683)			 ::Event obj = _gthis->containsName(pog2->name,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 685)			if (::hx::IsNotNull( obj )) {
HXLINE( 686)				return;
            			}
HXLINE( 690)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->push(pog2);
HXLINE( 692)			eventName->set_text(pog2->name);
HXLINE( 693)			eventType->set_selectedLabel(pog2->type);
HXLINE( 694)			eventValue->set_text((pog2->value + HX_("",00,00,00,00)));
HXLINE( 695)			eventPos->set_text((pog2->position + HX_("",00,00,00,00)));
HXLINE( 696)			_gthis->currentSelectedEventName = pog2->name;
HXLINE( 697)			_gthis->currentEventPosition = pog2->position;
HXLINE( 699)			_gthis->savedType = pog2->type;
HXLINE( 700)			_gthis->savedValue = (pog2->value + HX_("",00,00,00,00));
HXLINE( 702)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 704)			{
HXLINE( 704)				int _g_current = 0;
HXDLIN( 704)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 704)				while((_g_current < _g_array->length)){
HXLINE( 704)					 ::Event _g1_value = _g_array->__get(_g_current).StaticCast<  ::Event >();
HXDLIN( 704)					_g_current = (_g_current + 1);
HXDLIN( 704)					int _g1_key = (_g_current - 1);
HXDLIN( 704)					int key = _g1_key;
HXDLIN( 704)					 ::Event value = _g1_value;
HXLINE( 705)					listofnames->push(value->name);
            				}
            			}
HXLINE( 708)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis1 = _gthis->listOfEvents;
HXDLIN( 708)			_gthis1->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 710)			_gthis->listOfEvents->set_selectedLabel(pog2->name);
HXLINE( 712)			::TimingStruct_obj::clearTimings();
HXLINE( 714)			int currentIndex = 0;
HXLINE( 715)			{
HXLINE( 715)				int _g = 0;
HXDLIN( 715)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 715)				while((_g < _g1->length)){
HXLINE( 715)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 715)					_g = (_g + 1);
HXLINE( 717)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 718)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 719)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 720)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 723)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 725)						Float beat = pos;
HXLINE( 727)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 729)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 731)						if ((currentIndex != 0)) {
HXLINE( 733)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 734)							data->endBeat = beat;
HXLINE( 735)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 736)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 737)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 738)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 741)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 746)			{
HXLINE( 746)				int _g2 = 0;
HXDLIN( 746)				::Array< ::Dynamic> _g3 = ::TimingStruct_obj::AllTimings;
HXDLIN( 746)				while((_g2 < _g3->length)){
HXLINE( 746)					 ::TimingStruct i = _g3->__get(_g2).StaticCast<  ::TimingStruct >();
HXDLIN( 746)					_g2 = (_g2 + 1);
            				}
            			}
HXLINE( 749)			_gthis->recalculateAllSectionTimes();
HXLINE( 750)			_gthis->poggers();
HXLINE( 752)			_gthis->regenerateLines();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_2, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_756_addEventsUI)
HXLINE( 760)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 760)			::String obj = _gthis->listOfEvents->get_selectedLabel();
HXDLIN( 760)			 ::Event obj1 = _gthis1->containsName(obj,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 764)			if (::hx::IsNull( obj1 )) {
HXLINE( 765)				return;
            			}
HXLINE( 769)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->remove(obj1);
HXLINE( 771)			 ::Event firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
HXLINE( 773)			if (::hx::IsNull( firstEvent )) {
HXLINE( 775)				::Array< ::Dynamic> eventRemove = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 775)				eventRemove->push( ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1)));
HXLINE( 776)				firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
            			}
HXLINE( 779)			eventName->set_text(firstEvent->name);
HXLINE( 780)			eventType->set_selectedLabel(firstEvent->type);
HXLINE( 781)			eventValue->set_text((firstEvent->value + HX_("",00,00,00,00)));
HXLINE( 782)			eventPos->set_text((firstEvent->position + HX_("",00,00,00,00)));
HXLINE( 783)			_gthis->currentSelectedEventName = firstEvent->name;
HXLINE( 784)			_gthis->currentEventPosition = firstEvent->position;
HXLINE( 786)			_gthis->savedType = firstEvent->type;
HXLINE( 787)			_gthis->savedValue = (firstEvent->value + HX_("",00,00,00,00));
HXLINE( 789)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 791)			{
HXLINE( 791)				int _g_current = 0;
HXDLIN( 791)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 791)				while((_g_current < _g_array->length)){
HXLINE( 791)					 ::Event _g1_value = _g_array->__get(_g_current).StaticCast<  ::Event >();
HXDLIN( 791)					_g_current = (_g_current + 1);
HXDLIN( 791)					int _g1_key = (_g_current - 1);
HXDLIN( 791)					int key = _g1_key;
HXDLIN( 791)					 ::Event value = _g1_value;
HXLINE( 792)					listofnames->push(value->name);
            				}
            			}
HXLINE( 795)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis2 = _gthis->listOfEvents;
HXDLIN( 795)			_gthis2->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 797)			_gthis->listOfEvents->set_selectedLabel(firstEvent->name);
HXLINE( 799)			::TimingStruct_obj::clearTimings();
HXLINE( 801)			int currentIndex = 0;
HXLINE( 802)			{
HXLINE( 802)				int _g = 0;
HXDLIN( 802)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 802)				while((_g < _g1->length)){
HXLINE( 802)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 802)					_g = (_g + 1);
HXLINE( 804)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 805)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 806)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 807)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 810)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 812)						Float beat = pos;
HXLINE( 814)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 816)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 818)						if ((currentIndex != 0)) {
HXLINE( 820)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 821)							data->endBeat = beat;
HXLINE( 822)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 823)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 824)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 825)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 828)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 832)			_gthis->recalculateAllSectionTimes();
HXLINE( 833)			_gthis->poggers();
HXLINE( 835)			_gthis->regenerateLines();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_839_addEventsUI)
HXLINE( 840)			 ::Event obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 841)			if (::hx::IsNull( obj )) {
HXLINE( 842)				return;
            			}
HXLINE( 843)			_gthis->currentEventPosition = _gthis->curDecimalBeat;
HXLINE( 844)			obj->position = _gthis->currentEventPosition;
HXLINE( 845)			eventPos->set_text((_gthis->currentEventPosition + HX_("",00,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(1)
            		void _hx_run(::String name){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_896_addEventsUI)
HXLINE( 897)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 897)			::String event = _gthis->listOfEvents->get_selectedLabel();
HXDLIN( 897)			 ::Event event1 = _gthis1->containsName(event,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 899)			if (::hx::IsNull( event1 )) {
HXLINE( 900)				return;
            			}
HXLINE( 904)			eventName->set_text(event1->name);
HXLINE( 905)			eventValue->set_text((event1->value + HX_("",00,00,00,00)));
HXLINE( 906)			eventPos->set_text((event1->position + HX_("",00,00,00,00)));
HXLINE( 907)			eventType->set_selectedLabel(event1->type);
HXLINE( 908)			_gthis->currentSelectedEventName = event1->name;
HXLINE( 909)			_gthis->currentEventPosition = event1->position;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String string,::String string2){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_915_addEventsUI)
HXLINE( 915)			_gthis->savedValue = string;
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String type){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_920_addEventsUI)
HXLINE( 920)			_gthis->savedType = eventType->get_selectedLabel();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String string,::String string2){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_924_addEventsUI)
HXLINE( 925)			 ::Event obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 926)			if (::hx::IsNull( obj )) {
HXLINE( 928)				_gthis->currentSelectedEventName = string;
HXLINE( 929)				return;
            			}
HXLINE( 931)			obj = _gthis->containsName(string,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 932)			if (::hx::IsNotNull( obj )) {
HXLINE( 933)				return;
            			}
HXLINE( 934)			obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 935)			obj->name = string;
HXLINE( 936)			_gthis->currentSelectedEventName = string;
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_583_addEventsUI)
HXLINE( 582)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 584)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 586)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 589)		::String firstEvent = HX_("",00,00,00,00);
HXLINE( 591)		if ((::Lambda_obj::count(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic),null()) != 0)) {
HXLINE( 593)			firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->name;
            		}
HXLINE( 596)		 ::flixel::text::FlxText listLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,5,null(),HX_("List of Events",00,a9,f1,9c),null(),null());
HXLINE( 597)		 ::flixel::text::FlxText nameLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,5,null(),HX_("Event Name",51,cc,89,80),null(),null());
HXLINE( 598)		 ::flixel::addons::ui::FlxUIInputText eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,20,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 599)		 ::flixel::text::FlxText typeLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,45,null(),HX_("Type of Event",37,e6,4b,c6),null(),null());
HXLINE( 600)		 ::flixel::addons::ui::FlxUIDropDownMenu eventType =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,60,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_32,2),true),null(),null(),null(),null(),null());
HXLINE( 601)		 ::flixel::text::FlxText valueLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,45,null(),HX_("Event Value",ab,ea,3c,93),null(),null());
HXLINE( 602)		 ::flixel::addons::ui::FlxUIInputText eventValue =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,60,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 603)		 ::flixel::ui::FlxButton eventSave =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,155,HX_("Save Event",f7,de,33,df), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 675)		 ::flixel::text::FlxText posLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,85,null(),HX_("Event Position",af,75,21,14),null(),null());
HXLINE( 676)		 ::flixel::addons::ui::FlxUIInputText eventPos =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,100,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 677)		 ::flixel::ui::FlxButton eventAdd =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,95,155,HX_("Add Event",9b,64,c0,f9), ::Dynamic(new _hx_Closure_1(eventType,_gthis,eventName,eventValue,eventPos)));
HXLINE( 756)		 ::flixel::ui::FlxButton eventRemove =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,180,155,HX_("Remove Event",3e,37,09,d7), ::Dynamic(new _hx_Closure_2(eventType,_gthis,eventName,eventValue,eventPos)));
HXLINE( 839)		 ::flixel::ui::FlxButton updatePos =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,120,HX_("Update Pos",fd,ab,f0,d9), ::Dynamic(new _hx_Closure_3(_gthis,eventPos)));
HXLINE( 850)		::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 852)		 ::Event firstEventObject = null();
HXLINE( 854)		{
HXLINE( 854)			int _g = 0;
HXDLIN( 854)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 854)			while((_g < _g1->length)){
HXLINE( 854)				 ::Event event = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 854)				_g = (_g + 1);
HXLINE( 855)				::String name = ( (::String)(::Reflect_obj::field(event,HX_("name",4b,72,ff,48))) );
HXLINE( 856)				::String type = ( (::String)(::Reflect_obj::field(event,HX_("type",ba,f2,08,4d))) );
HXLINE( 857)				Float pos = ( (Float)(::Reflect_obj::field(event,HX_("position",a9,a0,fa,ca))) );
HXLINE( 858)				Float value = ( (Float)(::Reflect_obj::field(event,HX_("value",71,7f,b8,31))) );
HXLINE( 862)				 ::Event eventt =  ::Event_obj::__alloc( HX_CTX ,name,pos,value,type);
HXLINE( 864)				this->chartEvents->push(eventt);
HXLINE( 865)				listofnames->push(name);
            			}
            		}
HXLINE( 868)		::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),this->chartEvents,::hx::paccDynamic);
HXLINE( 870)		if ((listofnames->length == 0)) {
HXLINE( 871)			listofnames->push(HX_("",00,00,00,00));
            		}
HXLINE( 873)		if ((( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length != 0)) {
HXLINE( 874)			firstEventObject = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
            		}
HXLINE( 878)		if ((firstEvent != HX_("",00,00,00,00))) {
HXLINE( 881)			eventName->set_text(firstEventObject->name);
HXLINE( 883)			eventType->set_selectedLabel(firstEventObject->type);
HXLINE( 885)			eventValue->set_text((firstEventObject->value + HX_("",00,00,00,00)));
HXLINE( 887)			this->currentSelectedEventName = firstEventObject->name;
HXLINE( 889)			this->currentEventPosition = firstEventObject->position;
HXLINE( 891)			eventPos->set_text((this->currentEventPosition + HX_("",00,00,00,00)));
            		}
HXLINE( 895)		this->listOfEvents =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,20,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true), ::Dynamic(new _hx_Closure_4(eventType,_gthis,eventName,eventValue,eventPos)),null(),null(),null(),null());
HXLINE( 912)		eventValue->callback =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE( 918)		eventType->callback =  ::Dynamic(new _hx_Closure_6(eventType,_gthis));
HXLINE( 923)		eventName->callback =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE( 940)		this->Typeables->push(eventPos);
HXLINE( 941)		this->Typeables->push(eventValue);
HXLINE( 942)		this->Typeables->push(eventName);
HXLINE( 944)		 ::flixel::addons::ui::FlxUI tab_events =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_options,null(),null(),null(),null());
HXLINE( 945)		tab_events->name = HX_("Events",39,c3,fe,ca);
HXLINE( 946)		tab_events->add(posLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 947)		tab_events->add(valueLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 948)		tab_events->add(nameLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 949)		tab_events->add(listLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 950)		tab_events->add(typeLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 951)		tab_events->add(eventName).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 952)		tab_events->add(eventValue).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 953)		tab_events->add(eventSave).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 954)		tab_events->add(eventAdd).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 955)		tab_events->add(eventRemove).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 956)		tab_events->add(eventPos).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 957)		tab_events->add(updatePos).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 958)		tab_events->add(eventType).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 959)		tab_events->add(this->listOfEvents).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 960)		this->UI_options->addGroup(tab_events);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addEventsUI,(void))

void ChartingState_obj::addOptionsUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,hitsounds) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_971_addOptionsUI)
HXLINE( 971)			_gthis->playClaps = hitsounds->checked;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUICheckBox,check_mute_inst) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_977_addOptionsUI)
HXLINE( 978)			Float vol = ( (Float)(1) );
HXLINE( 980)			if (check_mute_inst->checked) {
HXLINE( 981)				vol = ( (Float)(0) );
            			}
HXLINE( 983)			::flixel::FlxG_obj::sound->music->set_volume(vol);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_991_addOptionsUI)
HXLINE( 991)			_gthis->defaultSnap = _gthis->check_snap->checked;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_964_addOptionsUI)
HXLINE( 963)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 967)		 ::flixel::addons::ui::FlxUICheckBox hitsounds =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Play hitsounds",4b,26,03,51),100,null(),null());
HXLINE( 968)		hitsounds->set_checked(false);
HXLINE( 969)		hitsounds->callback =  ::Dynamic(new _hx_Closure_0(_gthis,hitsounds));
HXLINE( 974)		 ::flixel::addons::ui::FlxUICheckBox check_mute_inst =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,90,null(),null(),HX_("Mute Instrumental",79,89,01,0a),100,null(),null());
HXLINE( 975)		check_mute_inst->set_checked(false);
HXLINE( 976)		check_mute_inst->callback =  ::Dynamic(new _hx_Closure_1(check_mute_inst));
HXLINE( 986)		this->check_snap =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,80,25,null(),null(),HX_("Snap to grid",d5,83,5b,e7),100,null(),null());
HXLINE( 987)		this->check_snap->set_checked(this->defaultSnap);
HXLINE( 989)		this->check_snap->callback =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 995)		 ::flixel::addons::ui::FlxUI tab_options =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_options,null(),null(),null(),null());
HXLINE( 996)		tab_options->name = HX_("Options",3e,5b,4f,ad);
HXLINE( 997)		tab_options->add(hitsounds).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 998)		tab_options->add(check_mute_inst).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 999)		this->UI_options->addGroup(tab_options);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addOptionsUI,(void))

void ChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::addons::ui::FlxUICheckBox,check_voices) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1012_addSongUI)
HXLINE(1012)			::ChartingState_obj::_song->__SetField(HX_("needsVoices",be,05,e9,0d),check_voices->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1018_addSongUI)
HXLINE(1018)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1023_addSongUI)
HXLINE(1023)			_gthis->loadSong(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1028_addSongUI)
HXLINE(1028)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1028)			_gthis1->loadJson(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1033_addSongUI)
HXLINE(1034)			{
HXLINE(1034)				int _g = 0;
HXDLIN(1034)				int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(1034)				while((_g < _g1)){
HXLINE(1034)					_g = (_g + 1);
HXDLIN(1034)					int ii = (_g - 1);
HXLINE(1036)					{
HXLINE(1036)						int _g1 = 0;
HXDLIN(1036)						int _g2 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(ii)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(1036)						while((_g1 < _g2)){
HXLINE(1036)							_g1 = (_g1 + 1);
HXDLIN(1036)							int i = (_g1 - 1);
HXLINE(1038)							 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(ii)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
            						}
            					}
            				}
            			}
HXLINE(1041)			_gthis->resetSection(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDialstep, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDial, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDialms) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1089_addSongUI)
HXLINE(1089)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1089)			int shiftNoteButton = ::Std_obj::_hx_int(stepperShiftNoteDial->value);
HXDLIN(1089)			int shiftNoteButton1 = ::Std_obj::_hx_int(stepperShiftNoteDialstep->value);
HXDLIN(1089)			_gthis1->shiftNotes(shiftNoteButton,shiftNoteButton1,::Std_obj::_hx_int(stepperShiftNoteDialms->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1099_addSongUI)
HXLINE(1099)			::Array< ::String > characters1 = characters;
HXDLIN(1099)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN(1099)			::ChartingState_obj::_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(player1DropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1107_addSongUI)
HXLINE(1107)			::Array< ::String > characters1 = characters;
HXDLIN(1107)			 ::Dynamic player2DropDown = ::Std_obj::parseInt(character);
HXDLIN(1107)			::ChartingState_obj::_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(player2DropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8,::Array< ::String >,gfVersions) HXARGC(1)
            		void _hx_run(::String gfVersion){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1115_addSongUI)
HXLINE(1115)			::Array< ::String > gfVersions1 = gfVersions;
HXDLIN(1115)			 ::Dynamic gfVersionDropDown = ::Std_obj::parseInt(gfVersion);
HXDLIN(1115)			::ChartingState_obj::_song->__SetField(HX_("gfVersion",b9,c6,7d,f3),gfVersions1->__get(( (int)(gfVersionDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9,::Array< ::String >,stages) HXARGC(1)
            		void _hx_run(::String stage){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1123_addSongUI)
HXLINE(1123)			::Array< ::String > stages1 = stages;
HXDLIN(1123)			 ::Dynamic stageDropDown = ::Std_obj::parseInt(stage);
HXDLIN(1123)			::ChartingState_obj::_song->__SetField(HX_("stage",be,6a,0b,84),stages1->__get(( (int)(stageDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10,::Array< ::String >,noteStyles) HXARGC(1)
            		void _hx_run(::String noteStyle){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1131_addSongUI)
HXLINE(1131)			::Array< ::String > noteStyles1 = noteStyles;
HXDLIN(1131)			 ::Dynamic noteStyleDropDown = ::Std_obj::parseInt(noteStyle);
HXDLIN(1131)			::ChartingState_obj::_song->__SetField(HX_("noteStyle",df,ef,aa,c1),noteStyles1->__get(( (int)(noteStyleDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1003_addSongUI)
HXLINE(1002)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1004)		 ::flixel::addons::ui::FlxUIInputText UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE(1005)		this->typingShit = UI_songTitle;
HXLINE(1007)		 ::flixel::addons::ui::FlxUICheckBox check_voices =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,25,null(),null(),HX_("Has voice track",b7,2b,b0,eb),100,null(),null());
HXLINE(1008)		check_voices->set_checked(( (bool)(::ChartingState_obj::_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) ));
HXLINE(1010)		check_voices->callback =  ::Dynamic(new _hx_Closure_0(check_voices));
HXLINE(1016)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1021)		Float saveButton1 = saveButton->x;
HXDLIN(1021)		Float reloadSong = ((saveButton1 + saveButton->get_width()) + 10);
HXDLIN(1021)		 ::flixel::ui::FlxButton reloadSong1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong,saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(1026)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong1->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(1032)		 ::flixel::ui::FlxButton restart =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,140,HX_("Reset Chart",8d,3f,ff,f3), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1044)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("load autosave",66,5f,5a,83),this->loadAutosave_dyn());
HXLINE(1045)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,65,((Float)0.1),1,((Float)1.0),((Float)5000.0),1,null(),null(),null(),null(),null());
HXLINE(1046)		stepperBPM->set_value(::Conductor_obj::bpm);
HXLINE(1047)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE(1049)		 ::flixel::text::FlxText stepperBPMLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,65,null(),HX_("BPM",bf,5a,32,00),null(),null());
HXLINE(1051)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1052)		stepperSpeed->set_value(( (Float)(::ChartingState_obj::_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE(1053)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE(1055)		 ::flixel::text::FlxText stepperSpeedLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,80,null(),HX_("Scroll Speed",34,bf,42,cb),null(),null());
HXLINE(1057)		 ::flixel::addons::ui::FlxUINumericStepper stepperVocalVol =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,95,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1059)		if (!(::PlayState_obj::isSM)) {
HXLINE(1060)			stepperVocalVol->set_value(this->vocals->_volume);
            		}
            		else {
HXLINE(1062)			stepperVocalVol->set_value(( (Float)(1) ));
            		}
HXLINE(1066)		stepperVocalVol->name = HX_("song_vocalvol",a8,3c,96,f8);
HXLINE(1068)		 ::flixel::text::FlxText stepperVocalVolLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,95,null(),HX_("Vocal Volume",65,14,e3,28),null(),null());
HXLINE(1070)		 ::flixel::addons::ui::FlxUINumericStepper stepperSongVol =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,110,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1071)		stepperSongVol->set_value(::flixel::FlxG_obj::sound->music->_volume);
HXLINE(1072)		stepperSongVol->name = HX_("song_instvol",63,a1,f2,af);
HXLINE(1074)		 ::flixel::text::FlxText stepperSongVolLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,110,null(),HX_("Instrumental Volume",68,1c,6d,b8),null(),null());
HXLINE(1077)		 ::flixel::text::FlxText shiftNoteDialLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,245,null(),HX_("Shift Note FWD by (Section)",60,13,78,8d),null(),null());
HXLINE(1078)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDial =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,260,1,0,-1000,1000,0,null(),null(),null(),null(),null());
HXLINE(1079)		stepperShiftNoteDial->name = HX_("song_shiftnote",4a,09,de,10);
HXLINE(1080)		 ::flixel::text::FlxText shiftNoteDialLabel2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,275,null(),HX_("Shift Note FWD by (Step)",21,fd,77,43),null(),null());
HXLINE(1081)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDialstep =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,290,1,0,-1000,1000,0,null(),null(),null(),null(),null());
HXLINE(1082)		stepperShiftNoteDialstep->name = HX_("song_shiftnotems",30,cf,6a,8b);
HXLINE(1083)		 ::flixel::text::FlxText shiftNoteDialLabel3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,305,null(),HX_("Shift Note FWD by (ms)",e7,2a,fe,de),null(),null());
HXLINE(1084)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDialms =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,320,1,0,-1000,1000,2,null(),null(),null(),null(),null());
HXLINE(1085)		stepperShiftNoteDialms->name = HX_("song_shiftnotems",30,cf,6a,8b);
HXLINE(1087)		 ::flixel::ui::FlxButton shiftNoteButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,335,HX_("Shift",62,5c,50,0f), ::Dynamic(new _hx_Closure_5(_gthis,stepperShiftNoteDialstep,stepperShiftNoteDial,stepperShiftNoteDialms)));
HXLINE(1092)		::String library = null();
HXDLIN(1092)		::Array< ::String > characters = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/characterList",c2,06,08,81) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(1093)		::String library1 = null();
HXDLIN(1093)		::Array< ::String > gfVersions = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/gfVersionList",d2,b9,ee,44) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE(1094)		::String library2 = null();
HXDLIN(1094)		::Array< ::String > stages = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/stageList",d7,5a,0b,5e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library2));
HXLINE(1095)		::String library3 = null();
HXDLIN(1095)		::Array< ::String > noteStyles = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/noteStyleList",f8,6d,9e,7c) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library3));
HXLINE(1097)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_6(characters)),null(),null(),null(),null());
HXLINE(1101)		player1DropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1103)		 ::flixel::text::FlxText player1Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,80,64,HX_("Player 1",d2,1d,05,22),null(),null());
HXLINE(1105)		 ::flixel::addons::ui::FlxUIDropDownMenu player2DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_7(characters)),null(),null(),null(),null());
HXLINE(1109)		player2DropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1111)		 ::flixel::text::FlxText player2Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,80,64,HX_("Player 2",d3,1d,05,22),null(),null());
HXLINE(1113)		 ::flixel::addons::ui::FlxUIDropDownMenu gfVersionDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,200,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(gfVersions,true), ::Dynamic(new _hx_Closure_8(gfVersions)),null(),null(),null(),null());
HXLINE(1117)		gfVersionDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ));
HXLINE(1119)		 ::flixel::text::FlxText gfVersionLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,180,64,HX_("Girlfriend",da,95,f9,8e),null(),null());
HXLINE(1121)		 ::flixel::addons::ui::FlxUIDropDownMenu stageDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,200,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(stages,true), ::Dynamic(new _hx_Closure_9(stages)),null(),null(),null(),null());
HXLINE(1125)		stageDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE(1127)		 ::flixel::text::FlxText stageLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,180,64,HX_("Stage",9e,da,38,17),null(),null());
HXLINE(1129)		 ::flixel::addons::ui::FlxUIDropDownMenu noteStyleDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,300,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(noteStyles,true), ::Dynamic(new _hx_Closure_10(noteStyles)),null(),null(),null(),null());
HXLINE(1133)		noteStyleDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) ));
HXLINE(1135)		 ::flixel::text::FlxText noteStyleLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,280,64,HX_("Note Skin",6b,8d,33,f0),null(),null());
HXLINE(1138)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1139)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE(1140)		tab_group_song->add(UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1141)		tab_group_song->add(restart).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1142)		tab_group_song->add(check_voices).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1144)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1145)		tab_group_song->add(reloadSong1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1146)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1147)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1148)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1149)		tab_group_song->add(stepperBPMLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1150)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1151)		tab_group_song->add(stepperSpeedLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1152)		tab_group_song->add(stepperVocalVol).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1153)		tab_group_song->add(stepperVocalVolLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1154)		tab_group_song->add(stepperSongVol).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1155)		tab_group_song->add(stepperSongVolLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1156)		tab_group_song->add(shiftNoteDialLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1157)		tab_group_song->add(stepperShiftNoteDial).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1158)		tab_group_song->add(shiftNoteDialLabel2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1159)		tab_group_song->add(stepperShiftNoteDialstep).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1160)		tab_group_song->add(shiftNoteDialLabel3).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1161)		tab_group_song->add(stepperShiftNoteDialms).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1162)		tab_group_song->add(shiftNoteButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1165)		 ::flixel::addons::ui::FlxUI tab_group_assets =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1166)		tab_group_assets->name = HX_("Assets",a3,bc,97,80);
HXLINE(1167)		tab_group_assets->add(noteStyleDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1168)		tab_group_assets->add(noteStyleLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1169)		tab_group_assets->add(gfVersionDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1170)		tab_group_assets->add(gfVersionLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1171)		tab_group_assets->add(stageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1172)		tab_group_assets->add(stageLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1173)		tab_group_assets->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1174)		tab_group_assets->add(player2DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1175)		tab_group_assets->add(player1Label).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1176)		tab_group_assets->add(player2Label).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1178)		this->UI_box->addGroup(tab_group_song);
HXLINE(1179)		this->UI_box->addGroup(tab_group_assets);
HXLINE(1181)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,280,0,1,1);
HXLINE(1182)		this->add(this->camFollow);
HXLINE(1184)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongUI,(void))

void ChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1205_addSectionUI)
HXLINE(1205)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1205)			_gthis1->copySection(::Std_obj::_hx_int(stepperCopy->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1211_addSectionUI)
HXLINE(1213)			 ::Dynamic secit =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection);
HXLINE(1215)			if (::hx::IsNotNull( secit )) {
HXLINE(1217)				::Array< ::Dynamic> newSwaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1219)				{
HXLINE(1219)					int _g = 0;
HXDLIN(1219)					int _g1 = ( (::Array< ::Dynamic>)(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(1219)					while((_g < _g1)){
HXLINE(1219)						_g = (_g + 1);
HXDLIN(1219)						int i = (_g - 1);
HXLINE(1221)						::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE(1222)						if (::hx::IsLess( note->__get(1),4 )) {
HXLINE(1223)							::cpp::VirtualArray note1 = note;
HXDLIN(1223)							int swapSection = 1;
HXDLIN(1223)							note1->set(swapSection,(note1->__get(swapSection) + 4));
            						}
            						else {
HXLINE(1225)							::cpp::VirtualArray note1 = note;
HXDLIN(1225)							int swapSection = 1;
HXDLIN(1225)							note1->set(swapSection,(note1->__get(swapSection) - 4));
            						}
HXLINE(1226)						newSwaps->push(note);
            					}
            				}
HXLINE(1229)				secit->__SetField(HX_("sectionNotes",1c,c8,a7,fe),newSwaps,::hx::paccDynamic);
HXLINE(1231)				{
HXLINE(1231)					int _g2 = 0;
HXDLIN(1231)					::Array< ::Dynamic> _g3 = _gthis->shownNotes;
HXDLIN(1231)					while((_g2 < _g3->length)){
HXLINE(1231)						 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(1231)						_g2 = (_g2 + 1);
HXLINE(1233)						{
HXLINE(1233)							int _g = 0;
HXDLIN(1233)							while((_g < newSwaps->length)){
HXLINE(1233)								::cpp::VirtualArray ii = ::cpp::VirtualArray( newSwaps->__get(_g));
HXDLIN(1233)								_g = (_g + 1);
HXLINE(1234)								bool swapSection;
HXDLIN(1234)								if (::hx::IsEq( i->strumTime,ii->__get(0) )) {
HXLINE(1234)									swapSection = (i->noteData == ::hx::Mod(ii->__get(1),4));
            								}
            								else {
HXLINE(1234)									swapSection = false;
            								}
HXDLIN(1234)								if (swapSection) {
HXLINE(1236)									i->set_x(( (Float)(::Math_obj::floor((( (Float)(ii->__get(1)) ) * ( (Float)(_gthis->GRID_SIZE) )))) ));
HXLINE(1238)									Float swapSection = _gthis->getYfromStrum(( (Float)(ii->__get(0)) ));
HXDLIN(1238)									i->set_y(( (Float)(::Math_obj::floor((swapSection * _gthis->zoomFactor))) ));
HXLINE(1239)									bool swapSection1;
HXDLIN(1239)									if ((i->sustainLength > 0)) {
HXLINE(1239)										swapSection1 = ::hx::IsNotNull( i->noteCharterObject );
            									}
            									else {
HXLINE(1239)										swapSection1 = false;
            									}
HXDLIN(1239)									if (swapSection1) {
HXLINE(1240)										i->noteCharterObject->set_x((i->x + (( (Float)(_gthis->GRID_SIZE) ) / ( (Float)(2) ))));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1245_addSectionUI)
HXLINE(1246)			 ::Dynamic sect = _gthis->lastUpdatedSection;
HXLINE(1250)			if (::hx::IsNull( sect )) {
HXLINE(1251)				return;
            			}
HXLINE(1253)			sect->__SetField(HX_("mustHitSection",3b,5f,87,62),_gthis->check_mustHitSection->checked,::hx::paccDynamic);
HXLINE(1255)			{
HXLINE(1255)				 ::Dynamic filter = null();
HXDLIN(1255)				 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->sectionRenderes->members,filter);
HXDLIN(1255)				while(i->hasNext()){
HXLINE(1255)					 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE(1257)					if (::hx::IsEq( i1->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),sect->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1259)						Float cachedY = i1->icon->y;
HXLINE(1260)						_gthis->remove(i1->icon,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1261)						 ::flixel::FlxSprite sectionicon;
HXDLIN(1261)						if (_gthis->check_mustHitSection->checked) {
HXLINE(1261)							sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            						}
            						else {
HXLINE(1261)							sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            						}
HXLINE(1262)						sectionicon->set_x(( (Float)(-95) ));
HXLINE(1263)						sectionicon->set_y(cachedY);
HXLINE(1264)						sectionicon->setGraphicSize(0,45);
HXLINE(1266)						i1->icon = sectionicon;
HXLINE(1267)						i1->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1269)						_gthis->add(sectionicon).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1282_addSectionUI)
HXLINE(1283)			 ::Dynamic section = _gthis->getSectionByTime(::Conductor_obj::songPosition,null());
HXLINE(1285)			if (::hx::IsNull( section )) {
HXLINE(1286)				return;
            			}
HXLINE(1288)			_gthis->check_mustHitSection->set_checked(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(1289)			_gthis->check_CPUAltAnim->set_checked(( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(1290)			_gthis->check_playerAltAnim->set_checked(( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1293_addSectionUI)
HXLINE(1294)			::PlayState_obj::SONG = ::ChartingState_obj::_song;
HXLINE(1295)			{
HXLINE(1295)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1295)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1296)			if (!(::PlayState_obj::isSM)) {
HXLINE(1297)				 ::flixel::_hx_system::FlxSound _this = _gthis->vocals;
HXDLIN(1297)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1298)			::PlayState_obj::startTime = ( (Float)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) );
HXLINE(1299)			{
HXLINE(1299)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(1299)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1299)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1195_addSectionUI)
HXLINE(1194)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1196)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1197)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE(1200)		 ::flixel::addons::ui::FlxUINumericStepper stepperCopy =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,110,132,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE(1201)		 ::flixel::text::FlxText stepperCopyLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,174,132,null(),HX_("sections back",99,e8,ca,16),null(),null());
HXLINE(1203)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,130,HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_0(_gthis,stepperCopy)));
HXLINE(1208)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Clear Section",12,08,13,f3),this->clearSection_dyn());
HXLINE(1210)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,170,HX_("Swap Section",58,33,c1,af), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1245)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("Camera Points to Player?",9b,4c,4b,86),100,null(), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(1273)		this->check_mustHitSection->set_checked(true);
HXLINE(1276)		this->check_CPUAltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,340,null(),null(),HX_("CPU Alternate Animation",46,fd,80,2c),100,null(),null());
HXLINE(1277)		this->check_CPUAltAnim->name = HX_("check_CPUAltAnim",09,09,2a,93);
HXLINE(1279)		this->check_playerAltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,180,340,null(),null(),HX_("Player Alternate Animation",3f,b2,0b,ac),100,null(),null());
HXLINE(1280)		this->check_playerAltAnim->name = HX_("check_playerAltAnim",82,25,63,ff);
HXLINE(1282)		 ::flixel::ui::FlxButton refresh =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,60,HX_("Refresh Section",60,26,aa,d5), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(1293)		 ::flixel::ui::FlxButton startSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,85,HX_("Play Here",9c,91,40,cc), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1302)		tab_group_section->add(refresh).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1303)		tab_group_section->add(startSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1306)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1307)		tab_group_section->add(this->check_CPUAltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1308)		tab_group_section->add(this->check_playerAltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1310)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1311)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1313)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionUI,(void))

void ChartingState_obj::goToSection(int section){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1321_goToSection)
HXLINE(1322)		int beat = (section * 4);
HXLINE(1323)		 ::TimingStruct data = ::TimingStruct_obj::getTimingAtBeat(( (Float)(beat) ));
HXLINE(1325)		if (::hx::IsNull( data )) {
HXLINE(1326)			return;
            		}
HXLINE(1328)		::flixel::FlxG_obj::sound->music->set_time(((data->startTime + ((( (Float)(beat) ) - data->startBeat) / (data->bpm / ( (Float)(60) )))) * ( (Float)(1000) )));
HXLINE(1329)		if (!(::PlayState_obj::isSM)) {
HXLINE(1330)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(1331)		this->curSection = section;
HXLINE(1334)		if ((::flixel::FlxG_obj::sound->music->_time < 0)) {
HXLINE(1335)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
            		else {
HXLINE(1336)			if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1337)				::flixel::FlxG_obj::sound->music->set_time(::flixel::FlxG_obj::sound->music->_length);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,goToSection,(void))

void ChartingState_obj::addNoteUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1357_addNoteUI)
HXLINE(1357)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1359)				 ::Dynamic filter = null();
HXDLIN(1359)				 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->selectedBoxes->members,filter);
HXDLIN(1359)				while(i->hasNext()){
HXLINE(1359)					 ::ChartingBox i1 = i->next().StaticCast<  ::ChartingBox >();
HXLINE(1361)					i1->connectedNoteData->set(3,_gthis->check_naltAnim->checked);
HXLINE(1363)					{
HXLINE(1363)						int _g = 0;
HXDLIN(1363)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1363)						while((_g < _g1->length)){
HXLINE(1363)							 ::Dynamic ii = _g1->__get(_g);
HXDLIN(1363)							_g = (_g + 1);
HXLINE(1365)							{
HXLINE(1365)								int _g2 = 0;
HXDLIN(1365)								::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1365)								while((_g2 < _g3->length)){
HXLINE(1365)									::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(1365)									_g2 = (_g2 + 1);
HXLINE(1366)									bool _hx_tmp;
HXDLIN(1366)									if (::hx::IsEq( n->__get(0),i1->connectedNoteData->__get(0) )) {
HXLINE(1366)										_hx_tmp = ::hx::IsEq( n->__get(1),i1->connectedNoteData->__get(1) );
            									}
            									else {
HXLINE(1366)										_hx_tmp = false;
            									}
HXDLIN(1366)									if (_hx_tmp) {
HXLINE(1367)										n->set(3,i1->connectedNoteData->__get(3));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1343_addNoteUI)
HXLINE(1342)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1344)		this->tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1345)		this->tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE(1347)		this->writingNotesText =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,20,100,0,HX_("",00,00,00,00),null(),null());
HXLINE(1348)		this->writingNotesText->setFormat(HX_("Arial",23,09,b6,b8),20,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1350)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,(::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,((::Conductor_obj::stepCrochet * ( (Float)(16) )) * ( (Float)(4) )),null(),null(),null(),null(),null(),null());
HXLINE(1351)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE(1352)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE(1354)		this->check_naltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,150,null(),null(),HX_("Toggle Alternative Animation",65,67,17,d5),100,null(),null());
HXLINE(1355)		this->check_naltAnim->callback =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(1373)		 ::flixel::text::FlxText stepperSusLengthLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,10,null(),HX_("Note Sustain Length",51,bb,65,f7),null(),null());
HXLINE(1375)		 ::flixel::ui::FlxButton applyLength =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,100,HX_("Apply Data",5c,22,e4,a8),null());
HXLINE(1377)		this->tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1378)		this->tab_group_note->add(stepperSusLengthLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1379)		this->tab_group_note->add(applyLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1380)		this->tab_group_note->add(this->check_naltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1382)		this->UI_box->addGroup(this->tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteUI,(void))

void ChartingState_obj::pasteNotesFromArray(::Array< ::Dynamic> array,::hx::Null< bool >  __o_fromStrum){
            		bool fromStrum = __o_fromStrum.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1400_pasteNotesFromArray)
HXDLIN(1400)		int _g = 0;
HXDLIN(1400)		while((_g < array->length)){
HXDLIN(1400)			::cpp::VirtualArray i = ::cpp::VirtualArray( array->__get(_g));
HXDLIN(1400)			_g = (_g + 1);
HXLINE(1402)			Float strum = ( (Float)(i->__get(0)) );
HXLINE(1403)			if (fromStrum) {
HXLINE(1404)				strum = (strum + ::Conductor_obj::songPosition);
            			}
HXLINE(1405)			int section = 0;
HXLINE(1406)			{
HXLINE(1406)				int _g1 = 0;
HXDLIN(1406)				::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1406)				while((_g1 < _g2->length)){
HXLINE(1406)					 ::Dynamic ii = _g2->__get(_g1);
HXDLIN(1406)					_g1 = (_g1 + 1);
HXLINE(1408)					bool _hx_tmp;
HXDLIN(1408)					if (::hx::IsLessEq( ii->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),strum )) {
HXLINE(1408)						_hx_tmp = ::hx::IsGreater( ii->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic),strum );
            					}
            					else {
HXLINE(1408)						_hx_tmp = false;
            					}
HXDLIN(1408)					if (_hx_tmp) {
HXLINE(1412)						::Array< Float > newData = ::Array_obj< Float >::__new(5)->init(0,strum)->init(1,i->__get(1))->init(2,i->__get(2))->init(3,i->__get(3))->init(4,i->__get(4));
HXLINE(1413)						( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(newData);
HXLINE(1415)						::cpp::VirtualArray thing = ( (::cpp::VirtualArray)( ::Dynamic(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length - 1))) );
HXLINE(1417)						 ::Note note =  ::Note_obj::__alloc( HX_CTX ,strum,::Math_obj::floor(::hx::Mod(i->__get(1),4)),null(),false,true,i->__get(3),i->__get(4));
HXLINE(1418)						note->rawNoteData = ( (int)(i->__get(1)) );
HXLINE(1419)						note->sustainLength = ( (Float)(i->__get(2)) );
HXLINE(1420)						note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(1421)						note->updateHitbox();
HXLINE(1422)						note->set_x(( (Float)(::Math_obj::floor((( (Float)(i->__get(1)) ) * ( (Float)(this->GRID_SIZE) )))) ));
HXLINE(1424)						note->charterSelected = true;
HXLINE(1427)						Float _hx_tmp = this->getYfromStrum(strum);
HXDLIN(1427)						note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(1429)						 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(1430)						box->connectedNoteData = thing;
HXLINE(1431)						this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(1433)						this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(1435)						this->pastedNotes->push(note);
HXLINE(1437)						if ((note->sustainLength > 0)) {
HXLINE(1439)							 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE(1440)							Float sustainVis1 = this->getYfromStrum((note->strumTime + note->sustainLength));
HXLINE(1439)							 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - note->y)),null(),null(),null());
HXLINE(1442)							note->noteCharterObject = sustainVis2;
HXLINE(1444)							this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            						}
HXLINE(1447)						continue;
            					}
HXLINE(1449)					section = (section + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,pasteNotesFromArray,(void))

void ChartingState_obj::loadSong(::String daSong){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1506_loadSong)
HXLINE(1507)			if (!(::PlayState_obj::isSM)) {
HXLINE(1508)				_gthis->vocals->pause();
            			}
HXLINE(1509)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1510)			_gthis->goToSection(0);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1454_loadSong)
HXLINE(1453)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1455)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1457)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1457)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1461)		if (::PlayState_obj::isSM) {
HXLINE(1464)			 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC));
HXLINE(1465)			 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1466)			sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE(1467)			::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            		}
            		else {
HXLINE(1470)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1470)			::String songLowercase = ::StringTools_obj::replace(daSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1470)			::String _hx_switch_0 = songLowercase;
            			if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1470)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1470)				goto _hx_goto_70;
            			}
            			if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1470)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1470)				goto _hx_goto_70;
            			}
            			_hx_goto_70:;
HXDLIN(1470)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),((Float)0.6),null(),null());
            		}
HXLINE(1475)		if (::PlayState_obj::isSM) {
HXLINE(1476)			::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJsonRAW(::sys::io::File_obj::getContent((::PlayState_obj::pathToSm + HX_("/converted.json",73,2b,b3,66)))));
            		}
            		else {
HXLINE(1479)			::String songFormat = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(1480)			::String _hx_switch_1 = songFormat;
            			if (  (_hx_switch_1==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(1481)				songFormat = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(1481)				goto _hx_goto_71;
            			}
            			if (  (_hx_switch_1==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(1482)				songFormat = HX_("Philly",48,eb,f2,23);
HXDLIN(1482)				goto _hx_goto_71;
            			}
            			_hx_goto_71:;
HXLINE(1485)			::String poop = ::Highscore_obj::formatSong(songFormat,::PlayState_obj::storyDifficulty);
HXLINE(1487)			::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJson(poop,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) )));
            		}
HXLINE(1492)		if (::PlayState_obj::isSM) {
HXLINE(1493)			this->vocals = null();
            		}
            		else {
HXLINE(1495)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1495)			::String songLowercase = ::StringTools_obj::replace(daSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1495)			::String _hx_switch_2 = songLowercase;
            			if (  (_hx_switch_2==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1495)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1495)				goto _hx_goto_72;
            			}
            			if (  (_hx_switch_2==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1495)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1495)				goto _hx_goto_72;
            			}
            			_hx_goto_72:;
HXDLIN(1495)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
HXLINE(1499)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1501)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1502)		if (!(::PlayState_obj::isSM)) {
HXLINE(1503)			this->vocals->pause();
            		}
HXLINE(1505)		::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadSong,(void))

void ChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1515_generateUI)
HXLINE(1516)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE(1518)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(1522)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE(1523)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateUI,(void))

void ChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1535_getEvent)
HXDLIN(1535)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE(1537)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE(1538)			::String label = check->getLabel()->text;
HXLINE(1539)			::String _hx_switch_0 = label;
            			if (  (_hx_switch_0==HX_("CPU Alternate Animation",46,fd,80,2c)) ){
HXLINE(1542)				this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("CPUAltAnim",b2,2f,f2,ef),check->checked,::hx::paccDynamic);
HXDLIN(1542)				goto _hx_goto_77;
            			}
            			if (  (_hx_switch_0==HX_("Player Alternate Animation",3f,b2,0b,ac)) ){
HXLINE(1544)				this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("playerAltAnim",79,ce,6b,5d),check->checked,::hx::paccDynamic);
HXDLIN(1544)				goto _hx_goto_77;
            			}
            			_hx_goto_77:;
            		}
            		else {
HXLINE(1547)			bool _hx_tmp;
HXDLIN(1547)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE(1547)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE(1547)				_hx_tmp = false;
            			}
HXDLIN(1547)			if (_hx_tmp) {
HXLINE(1549)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE(1550)				::String wname = nums->name;
HXLINE(1553)				::String _hx_switch_1 = wname;
            				if (  (_hx_switch_1==HX_("divisions",a6,2a,2c,7f)) ){
HXLINE(1649)					this->subDivisions = nums->value;
HXLINE(1650)					this->updateGrid();
HXLINE(1648)					goto _hx_goto_78;
            				}
            				if (  (_hx_switch_1==HX_("note_susLength",8a,6b,51,4b)) ){
HXLINE(1623)					if (::hx::IsNull( this->curSelectedNote )) {
HXLINE(1624)						return;
            					}
HXLINE(1626)					if ((nums->value <= 0)) {
HXLINE(1627)						nums->set_value(( (Float)(0) ));
            					}
HXLINE(1628)					this->curSelectedNote->set(2,nums->value);
HXLINE(1629)					this->updateGrid();
HXLINE(1622)					goto _hx_goto_78;
            				}
            				if (  (_hx_switch_1==HX_("section_bpm",45,60,97,44)) ){
HXLINE(1632)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1633)						nums->set_value(((Float)0.1));
            					}
HXLINE(1634)					this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("bpm",df,be,4a,00),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE(1635)					this->updateGrid();
HXLINE(1631)					goto _hx_goto_78;
            				}
            				if (  (_hx_switch_1==HX_("section_length",40,57,01,c1)) ){
HXLINE(1556)					if ((nums->value <= 4)) {
HXLINE(1557)						nums->set_value(( (Float)(4) ));
            					}
HXLINE(1558)					this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("lengthInSteps",3c,ed,41,db),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE(1559)					this->updateGrid();
HXLINE(1555)					goto _hx_goto_78;
            				}
            				if (  (_hx_switch_1==HX_("song_bpm",35,36,15,42)) ){
HXLINE(1567)					if ((nums->value <= 0)) {
HXLINE(1568)						nums->set_value(( (Float)(1) ));
            					}
HXLINE(1569)					::ChartingState_obj::_song->__SetField(HX_("bpm",df,be,4a,00),nums->value,::hx::paccDynamic);
HXLINE(1571)					if ((Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->type != HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(1572)						::lime::app::Application_obj::current->_hx___window->alert(HX_("i'm crying, first event isn't a bpm change. fuck you",3a,f3,2b,34),null());
            					}
            					else {
HXLINE(1575)						Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->value = nums->value;
HXLINE(1576)						this->regenerateLines();
            					}
HXLINE(1579)					::TimingStruct_obj::clearTimings();
HXLINE(1581)					int currentIndex = 0;
HXLINE(1582)					{
HXLINE(1582)						int _g = 0;
HXDLIN(1582)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(1582)						while((_g < _g1->length)){
HXLINE(1582)							 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(1582)							_g = (_g + 1);
HXLINE(1584)							 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE(1585)							::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE(1586)							Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE(1587)							Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE(1590)							if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(1592)								Float beat = pos;
HXLINE(1594)								Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1596)								::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE(1598)								if ((currentIndex != 0)) {
HXLINE(1600)									 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(1601)									data->endBeat = beat;
HXLINE(1602)									data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(1603)									Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(1604)									::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(1605)									::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            								}
HXLINE(1608)								currentIndex = (currentIndex + 1);
            							}
            						}
            					}
HXLINE(1613)					{
HXLINE(1613)						int _g2 = 0;
HXDLIN(1613)						::Array< ::Dynamic> _g3 = ::TimingStruct_obj::AllTimings;
HXDLIN(1613)						while((_g2 < _g3->length)){
HXLINE(1613)							 ::TimingStruct i = _g3->__get(_g2).StaticCast<  ::TimingStruct >();
HXDLIN(1613)							_g2 = (_g2 + 1);
            						}
            					}
HXLINE(1616)					this->recalculateAllSectionTimes();
HXLINE(1618)					this->regenerateLines();
HXLINE(1620)					this->poggers();
HXLINE(1566)					goto _hx_goto_78;
            				}
            				if (  (_hx_switch_1==HX_("song_instvol",63,a1,f2,af)) ){
HXLINE(1644)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1645)						nums->set_value(((Float)0.1));
            					}
HXLINE(1646)					::flixel::FlxG_obj::sound->music->set_volume(nums->value);
HXLINE(1643)					goto _hx_goto_78;
            				}
            				if (  (_hx_switch_1==HX_("song_speed",5d,10,41,a4)) ){
HXLINE(1562)					if ((nums->value <= 0)) {
HXLINE(1563)						nums->set_value(( (Float)(0) ));
            					}
HXLINE(1564)					::ChartingState_obj::_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
HXLINE(1561)					goto _hx_goto_78;
            				}
            				if (  (_hx_switch_1==HX_("song_vocalvol",a8,3c,96,f8)) ){
HXLINE(1638)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1639)						nums->set_value(((Float)0.1));
            					}
HXLINE(1640)					if (!(::PlayState_obj::isSM)) {
HXLINE(1641)						this->vocals->set_volume(nums->value);
            					}
HXLINE(1637)					goto _hx_goto_78;
            				}
            				_hx_goto_78:;
            			}
            		}
            	}


void ChartingState_obj::poggers(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1669_poggers)
HXLINE(1670)		::Array< ::Dynamic> notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1672)		{
HXLINE(1672)			int _g = 0;
HXDLIN(1672)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1672)			while((_g < _g1->length)){
HXLINE(1672)				 ::Dynamic section = _g1->__get(_g);
HXDLIN(1672)				_g = (_g + 1);
HXLINE(1675)				::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1677)				{
HXLINE(1677)					int _g2 = 0;
HXDLIN(1677)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1677)					while((_g2 < _g3->length)){
HXLINE(1677)						::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(1677)						_g2 = (_g2 + 1);
HXLINE(1680)						 ::Dynamic old = note->__get(0);
HXLINE(1681)						note->set(0,::TimingStruct_obj::getTimeFromBeat(( (Float)(note->__get(4)) )));
HXLINE(1682)						note->set(2,::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(note->__get(2)) ))));
HXLINE(1683)						if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1685)							notes->push(note);
HXLINE(1686)							removed->push(note);
            						}
HXLINE(1688)						if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(1690)							notes->push(note);
HXLINE(1691)							removed->push(note);
            						}
            					}
            				}
HXLINE(1695)				{
HXLINE(1695)					int _g4 = 0;
HXDLIN(1695)					while((_g4 < removed->length)){
HXLINE(1695)						::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(1695)						_g4 = (_g4 + 1);
HXLINE(1697)						( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            					}
            				}
            			}
            		}
HXLINE(1701)		{
HXLINE(1701)			int _g2 = 0;
HXDLIN(1701)			::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1701)			while((_g2 < _g3->length)){
HXLINE(1701)				 ::Dynamic section = _g3->__get(_g2);
HXDLIN(1701)				_g2 = (_g2 + 1);
HXLINE(1704)				::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1706)				{
HXLINE(1706)					int _g = 0;
HXDLIN(1706)					while((_g < notes->length)){
HXLINE(1706)						::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(1706)						_g = (_g + 1);
HXLINE(1708)						bool _hx_tmp;
HXDLIN(1708)						if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1708)							_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            						}
            						else {
HXLINE(1708)							_hx_tmp = false;
            						}
HXDLIN(1708)						if (_hx_tmp) {
HXLINE(1710)							saveRemove->push(i);
HXLINE(1711)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            						}
            					}
            				}
HXLINE(1715)				{
HXLINE(1715)					int _g1 = 0;
HXDLIN(1715)					while((_g1 < saveRemove->length)){
HXLINE(1715)						::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(1715)						_g1 = (_g1 + 1);
HXLINE(1716)						notes->remove(i);
            					}
            				}
            			}
            		}
HXLINE(1719)		{
HXLINE(1719)			 ::Dynamic filter = null();
HXDLIN(1719)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter);
HXDLIN(1719)			while(i->hasNext()){
HXLINE(1719)				 ::Note i1 = i->next().StaticCast<  ::Note >();
HXLINE(1721)				i1->strumTime = ::TimingStruct_obj::getTimeFromBeat(i1->beat);
HXLINE(1722)				Float _hx_tmp = this->getYfromStrum(i1->strumTime);
HXDLIN(1722)				i1->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(1723)				i1->sustainLength = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(i1->sustainLength));
HXLINE(1724)				if (::hx::IsNotNull( i1->noteCharterObject )) {
HXLINE(1726)					i1->noteCharterObject->set_y((i1->y + 40));
HXLINE(1727)					 ::flixel::FlxSprite i = i1->noteCharterObject;
HXDLIN(1727)					Float _hx_tmp = this->getYfromStrum((i1->strumTime + i1->sustainLength));
HXDLIN(1727)					i->makeGraphic(8,::Math_obj::floor(((_hx_tmp * this->zoomFactor) - i1->y)),-1,null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,poggers,(void))

Float ChartingState_obj::stepStartTime(int step){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1738_stepStartTime)
HXDLIN(1738)		return ((::Conductor_obj::bpm / (( (Float)(step) ) / ( (Float)(4) ))) / ( (Float)(60) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,stepStartTime,return )

Float ChartingState_obj::sectionStartTime( ::Dynamic __o_customIndex){
            		 ::Dynamic customIndex = __o_customIndex;
            		if (::hx::IsNull(__o_customIndex)) customIndex = -1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1742_sectionStartTime)
HXLINE(1743)		if (::hx::IsEq( customIndex,-1 )) {
HXLINE(1744)			customIndex = this->curSection;
            		}
HXLINE(1745)		Float daBPM = ::Conductor_obj::bpm;
HXLINE(1746)		Float daPos = ( (Float)(0) );
HXLINE(1747)		{
HXLINE(1747)			int _g = 0;
HXDLIN(1747)			 ::Dynamic _g1 = customIndex;
HXDLIN(1747)			while(::hx::IsLess( _g,_g1 )){
HXLINE(1747)				_g = (_g + 1);
HXDLIN(1747)				int i = (_g - 1);
HXLINE(1749)				daPos = (daPos + (( (Float)(4) ) * (( (Float)(60000) ) / daBPM)));
            			}
            		}
HXLINE(1751)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,sectionStartTime,return )

void ChartingState_obj::resizeEverything(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1770_resizeEverything)
HXDLIN(1770)		this->regenerateLines();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,resizeEverything,(void))

void ChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1792_update)
HXLINE(1791)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1793)		if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1794)			::flixel::FlxG_obj::sound->music->set_time(::flixel::FlxG_obj::sound->music->_length);
            		}
HXLINE(1796)		this->updateHeads();
HXLINE(1799)		::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),null(),null(),true,null());
HXLINE(1802)		{
HXLINE(1802)			 ::Dynamic filter = null();
HXDLIN(1802)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->sectionRenderes->members,filter);
HXDLIN(1802)			while(i->hasNext()){
HXLINE(1802)				 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE(1804)				Float diff = (i1->y - this->strumLine->y);
HXLINE(1805)				bool _hx_tmp;
HXDLIN(1805)				if ((diff < 4000)) {
HXLINE(1805)					_hx_tmp = (diff >= -4000);
            				}
            				else {
HXLINE(1805)					_hx_tmp = false;
            				}
HXDLIN(1805)				if (_hx_tmp) {
HXLINE(1807)					i1->set_active(true);
HXLINE(1808)					i1->set_visible(true);
            				}
            				else {
HXLINE(1812)					i1->set_active(false);
HXLINE(1813)					i1->set_visible(false);
            				}
            			}
            		}
HXLINE(1817)		this->shownNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1819)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1821)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1825)				::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,this->speed);
HXLINE(1826)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1830)					bool _hx_tmp;
HXDLIN(1830)					if (::hx::IsNotNull( this->vocals )) {
HXLINE(1830)						_hx_tmp = (this->vocals->_length > 0);
            					}
            					else {
HXLINE(1830)						_hx_tmp = false;
            					}
HXDLIN(1830)					if (_hx_tmp) {
HXLINE(1832)						::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,this->speed);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(1844)		{
HXLINE(1844)			 ::Dynamic filter1 = null();
HXDLIN(1844)			 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter1);
HXDLIN(1844)			while(note->hasNext()){
HXLINE(1844)				 ::Note note1 = note->next().StaticCast<  ::Note >();
HXLINE(1846)				Float diff = (note1->strumTime - ::Conductor_obj::songPosition);
HXLINE(1847)				bool _hx_tmp;
HXDLIN(1847)				if ((diff < 8000)) {
HXLINE(1847)					_hx_tmp = (diff >= -8000);
            				}
            				else {
HXLINE(1847)					_hx_tmp = false;
            				}
HXDLIN(1847)				if (_hx_tmp) {
HXLINE(1849)					this->shownNotes->push(note1);
HXLINE(1850)					Float _hx_tmp = this->getYfromStrum(note1->strumTime);
HXDLIN(1850)					note1->set_y((_hx_tmp * this->zoomFactor));
HXLINE(1851)					if ((note1->sustainLength > 0)) {
HXLINE(1853)						if (::hx::IsNotNull( note1->noteCharterObject )) {
HXLINE(1854)							if ((note1->noteCharterObject->y != (note1->y + this->GRID_SIZE))) {
HXLINE(1856)								note1->noteCharterObject->set_y((note1->y + this->GRID_SIZE));
HXLINE(1857)								 ::flixel::FlxSprite note = note1->noteCharterObject;
HXDLIN(1857)								Float _hx_tmp = this->getYfromStrum((note1->strumTime + note1->sustainLength));
HXDLIN(1857)								note->makeGraphic(8,::Math_obj::floor(((_hx_tmp * this->zoomFactor) - note1->y)),-1,null(),null());
            							}
            						}
            					}
HXLINE(1860)					note1->set_active(true);
HXLINE(1861)					note1->set_visible(true);
            				}
            				else {
HXLINE(1865)					note1->set_active(false);
HXLINE(1866)					note1->set_visible(false);
            				}
            			}
            		}
HXLINE(1870)		{
HXLINE(1870)			int _g = 0;
HXDLIN(1870)			::Array< ::Dynamic> _g1 = this->selectedBoxes->members;
HXDLIN(1870)			while((_g < _g1->length)){
HXLINE(1870)				 ::ChartingBox ii = _g1->__get(_g).StaticCast<  ::ChartingBox >();
HXDLIN(1870)				_g = (_g + 1);
HXLINE(1872)				ii->set_x(ii->connectedNote->x);
HXLINE(1873)				ii->set_y(ii->connectedNote->y);
            			}
            		}
HXLINE(1876)		bool doInput = true;
HXLINE(1878)		{
HXLINE(1878)			int _g2 = 0;
HXDLIN(1878)			::Array< ::Dynamic> _g3 = this->Typeables;
HXDLIN(1878)			while((_g2 < _g3->length)){
HXLINE(1878)				 ::flixel::addons::ui::FlxUIInputText i = _g3->__get(_g2).StaticCast<  ::flixel::addons::ui::FlxUIInputText >();
HXDLIN(1878)				_g2 = (_g2 + 1);
HXLINE(1880)				if (i->hasFocus) {
HXLINE(1881)					doInput = false;
            				}
            			}
            		}
HXLINE(1884)		if (doInput) {
HXLINE(1886)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE(1888)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1890)				if (!(::PlayState_obj::isSM)) {
HXLINE(1891)					this->vocals->pause();
            				}
HXLINE(1892)				this->claps->removeRange(0,this->claps->length);
HXLINE(1895)				bool _hx_tmp;
HXDLIN(1895)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1895)				if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1895)					_hx_tmp = !(this->waitingForRelease);
            				}
            				else {
HXLINE(1895)					_hx_tmp = false;
            				}
HXDLIN(1895)				if (_hx_tmp) {
HXLINE(1897)					int amount = ::flixel::FlxG_obj::mouse->wheel;
HXLINE(1899)					if ((amount > 0)) {
HXLINE(1900)						amount = 0;
            					}
HXLINE(1902)					Float increase = ( (Float)(0) );
HXLINE(1904)					if ((amount < 0)) {
HXLINE(1905)						increase = ((Float)-0.02);
            					}
            					else {
HXLINE(1907)						increase = ((Float)0.02);
            					}
HXLINE(1910)					 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1910)					_hx_tmp->zoomFactor = (_hx_tmp->zoomFactor + increase);
HXLINE(1912)					if ((this->zoomFactor > 2)) {
HXLINE(1913)						this->zoomFactor = ( (Float)(2) );
            					}
HXLINE(1915)					if ((this->zoomFactor < ((Float)0.1))) {
HXLINE(1916)						this->zoomFactor = ((Float)0.1);
            					}
HXLINE(1918)					this->resizeEverything();
            				}
            				else {
HXLINE(1922)					int amount = ::flixel::FlxG_obj::mouse->wheel;
HXLINE(1924)					bool _hx_tmp;
HXDLIN(1924)					if ((amount > 0)) {
HXLINE(1924)						_hx_tmp = (this->strumLine->y < 0);
            					}
            					else {
HXLINE(1924)						_hx_tmp = false;
            					}
HXDLIN(1924)					if (_hx_tmp) {
HXLINE(1925)						amount = 0;
            					}
HXLINE(1927)					if (this->doSnapShit) {
HXLINE(1929)						Float increase = ( (Float)(0) );
HXLINE(1930)						Float beats = ( (Float)(0) );
HXLINE(1932)						if ((amount < 0)) {
HXLINE(1934)							increase = (( (Float)(1) ) / this->deezNuts->get_float(this->snap));
HXLINE(1935)							Float beats1 = this->curDecimalBeat;
HXDLIN(1935)							int beats2 = ::Math_obj::floor(((beats1 * this->deezNuts->get_float(this->snap)) + ((Float)0.001)));
HXDLIN(1935)							beats = ((( (Float)(beats2) ) / this->deezNuts->get_float(this->snap)) + increase);
            						}
            						else {
HXLINE(1939)							increase = (( (Float)(-1) ) / this->deezNuts->get_float(this->snap));
HXLINE(1940)							Float beats1 = this->curDecimalBeat;
HXDLIN(1940)							Float beats2 = (( (Float)(::Math_obj::ceil((beats1 * this->deezNuts->get_float(this->snap)))) ) - ((Float)0.001));
HXDLIN(1940)							beats = ((beats2 / this->deezNuts->get_float(this->snap)) + increase);
            						}
HXLINE(1945)						 ::TimingStruct data = ::TimingStruct_obj::getTimingAtBeat(beats);
HXLINE(1947)						if ((beats <= 0)) {
HXLINE(1948)							::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            						}
HXLINE(1950)						Float bpm;
HXDLIN(1950)						if (::hx::IsNotNull( data )) {
HXLINE(1950)							bpm = data->bpm;
            						}
            						else {
HXLINE(1950)							bpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
HXLINE(1952)						if (::hx::IsNotNull( data )) {
HXLINE(1955)							::flixel::FlxG_obj::sound->music->set_time(((data->startTime + ((beats - data->startBeat) / (bpm / ( (Float)(60) )))) * ( (Float)(1000) )));
            						}
            					}
            					else {
HXLINE(1959)						 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1959)						_g->set_time((_g->_time - ((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * ::Conductor_obj::stepCrochet) * ((Float)0.4))));
            					}
HXLINE(1961)					if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1962)						::flixel::FlxG_obj::sound->music->set_time(::flixel::FlxG_obj::sound->music->_length);
            					}
HXLINE(1964)					if (!(::PlayState_obj::isSM)) {
HXLINE(1965)						this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            					}
            				}
            			}
HXLINE(1969)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1969)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(1971)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1971)				if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(1972)					 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1972)					_hx_tmp->speed = (_hx_tmp->speed + ((Float)0.1));
            				}
            				else {
HXLINE(1973)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1973)					if (_this->keyManager->checkStatus(37,_this->status)) {
HXLINE(1974)						 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1974)						_hx_tmp->speed = (_hx_tmp->speed - ((Float)0.1));
            					}
            				}
HXLINE(1976)				if ((this->speed > 3)) {
HXLINE(1977)					this->speed = ( (Float)(3) );
            				}
HXLINE(1978)				if ((this->speed <= ((Float)0.01))) {
HXLINE(1979)					this->speed = ((Float)0.1);
            				}
            			}
            			else {
HXLINE(1983)				bool _hx_tmp;
HXDLIN(1983)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1983)				if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(1983)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1983)					_hx_tmp = !(_this->keyManager->checkStatus(17,_this->status));
            				}
            				else {
HXLINE(1983)					_hx_tmp = false;
            				}
HXDLIN(1983)				if (_hx_tmp) {
HXLINE(1984)					this->goToSection((this->curSection + 1));
            				}
            				else {
HXLINE(1985)					bool _hx_tmp;
HXDLIN(1985)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1985)					if (_this->keyManager->checkStatus(37,_this->status)) {
HXLINE(1985)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1985)						_hx_tmp = !(_this->keyManager->checkStatus(17,_this->status));
            					}
            					else {
HXLINE(1985)						_hx_tmp = false;
            					}
HXDLIN(1985)					if (_hx_tmp) {
HXLINE(1986)						this->goToSection((this->curSection - 1));
            					}
            				}
            			}
HXLINE(1989)			bool _hx_tmp;
HXDLIN(1989)			 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(1989)			bool _hx_tmp1;
HXDLIN(1989)			if ((_this1->current != 1)) {
HXLINE(1989)				_hx_tmp1 = (_this1->current == 2);
            			}
            			else {
HXLINE(1989)				_hx_tmp1 = true;
            			}
HXDLIN(1989)			if (_hx_tmp1) {
HXLINE(1989)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1989)				_hx_tmp = _this->keyManager->checkStatus(17,_this->status);
            			}
            			else {
HXLINE(1989)				_hx_tmp = false;
            			}
HXDLIN(1989)			if (_hx_tmp) {
HXLINE(1991)				if (!(this->waitingForRelease)) {
HXLINE(1994)					this->waitingForRelease = true;
HXLINE(1995)					this->selectBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y,null());
HXLINE(1996)					 ::flixel::FlxSprite _hx_tmp = this->selectBox;
HXDLIN(1996)					int Alpha = 255;
HXDLIN(1996)					int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(1996)					{
HXLINE(1996)						color = (color & -16711681);
HXDLIN(1996)						color = (color | 11337728);
            					}
HXDLIN(1996)					{
HXLINE(1996)						color = (color & -65281);
HXDLIN(1996)						color = (color | 55296);
            					}
HXDLIN(1996)					{
HXLINE(1996)						color = (color & -256);
HXDLIN(1996)						color = (color | 230);
            					}
HXDLIN(1996)					{
HXLINE(1996)						color = (color & 16777215);
HXDLIN(1996)						int color1;
HXDLIN(1996)						if ((Alpha > 255)) {
HXLINE(1996)							color1 = 255;
            						}
            						else {
HXLINE(1996)							if ((Alpha < 0)) {
HXLINE(1996)								color1 = 0;
            							}
            							else {
HXLINE(1996)								color1 = Alpha;
            							}
            						}
HXDLIN(1996)						color = (color | (color1 << 24));
            					}
HXDLIN(1996)					_hx_tmp->makeGraphic(0,0,color,null(),null());
HXLINE(1997)					this->selectBox->set_alpha(((Float)0.4));
HXLINE(1999)					this->selectInitialX = this->selectBox->x;
HXLINE(2000)					this->selectInitialY = this->selectBox->y;
HXLINE(2002)					this->add(this->selectBox);
            				}
            				else {
HXLINE(2006)					if (this->waitingForRelease) {
HXLINE(2009)						this->selectBox->set_x(::Math_obj::min(( (Float)(::flixel::FlxG_obj::mouse->x) ),this->selectInitialX));
HXLINE(2010)						this->selectBox->set_y(::Math_obj::min(( (Float)(::flixel::FlxG_obj::mouse->y) ),this->selectInitialY));
HXLINE(2012)						 ::flixel::FlxSprite _hx_tmp = this->selectBox;
HXDLIN(2012)						int _hx_tmp1 = ::Math_obj::floor(::Math_obj::abs((( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->selectInitialX)));
HXDLIN(2012)						int _hx_tmp2 = ::Math_obj::floor(::Math_obj::abs((( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->selectInitialY)));
HXDLIN(2012)						int Alpha = 255;
HXDLIN(2012)						int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(2012)						{
HXLINE(2012)							color = (color & -16711681);
HXDLIN(2012)							color = (color | 11337728);
            						}
HXDLIN(2012)						{
HXLINE(2012)							color = (color & -65281);
HXDLIN(2012)							color = (color | 55296);
            						}
HXDLIN(2012)						{
HXLINE(2012)							color = (color & -256);
HXDLIN(2012)							color = (color | 230);
            						}
HXDLIN(2012)						{
HXLINE(2012)							color = (color & 16777215);
HXDLIN(2012)							int color1;
HXDLIN(2012)							if ((Alpha > 255)) {
HXLINE(2012)								color1 = 255;
            							}
            							else {
HXLINE(2012)								if ((Alpha < 0)) {
HXLINE(2012)									color1 = 0;
            								}
            								else {
HXLINE(2012)									color1 = Alpha;
            								}
            							}
HXDLIN(2012)							color = (color | (color1 << 24));
            						}
HXDLIN(2012)						_hx_tmp->makeGraphic(_hx_tmp1,_hx_tmp2,color,null(),null());
            					}
            				}
            			}
HXLINE(2016)			bool _hx_tmp2;
HXDLIN(2016)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE(2016)				_hx_tmp2 = this->waitingForRelease;
            			}
            			else {
HXLINE(2016)				_hx_tmp2 = false;
            			}
HXDLIN(2016)			if (_hx_tmp2) {
HXLINE(2019)				this->waitingForRelease = false;
HXLINE(2021)				while(true){
HXLINE(2021)					bool _hx_tmp;
HXDLIN(2021)					bool _hx_tmp1;
HXDLIN(2021)					if ((this->selectedBoxes->members->get_length() != 0)) {
HXLINE(2021)						_hx_tmp1 = (this->selectBox->get_width() > 10);
            					}
            					else {
HXLINE(2021)						_hx_tmp1 = false;
            					}
HXDLIN(2021)					if (_hx_tmp1) {
HXLINE(2021)						_hx_tmp = (this->selectBox->get_height() > 10);
            					}
            					else {
HXLINE(2021)						_hx_tmp = false;
            					}
HXDLIN(2021)					if (!(_hx_tmp)) {
HXLINE(2021)						goto _hx_goto_98;
            					}
HXLINE(2023)					Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(2024)					Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(2025)					this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            				}
            				_hx_goto_98:;
HXLINE(2028)				{
HXLINE(2028)					 ::Dynamic filter = null();
HXDLIN(2028)					 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter);
HXDLIN(2028)					while(i->hasNext()){
HXLINE(2028)						 ::Note i1 = i->next().StaticCast<  ::Note >();
HXLINE(2030)						bool _hx_tmp;
HXDLIN(2030)						if (i1->overlaps(this->selectBox,null(),null())) {
HXLINE(2030)							_hx_tmp = !(i1->charterSelected);
            						}
            						else {
HXLINE(2030)							_hx_tmp = false;
            						}
HXDLIN(2030)						if (_hx_tmp) {
HXLINE(2033)							this->selectNote(i1,false);
            						}
            					}
            				}
HXLINE(2036)				this->selectBox->destroy();
HXLINE(2037)				this->remove(this->selectBox,null());
            			}
HXLINE(2040)			bool _hx_tmp3;
HXDLIN(2040)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2040)			if (_this2->keyManager->checkStatus(17,_this2->status)) {
HXLINE(2040)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2040)				_hx_tmp3 = _this->keyManager->checkStatus(68,_this->status);
            			}
            			else {
HXLINE(2040)				_hx_tmp3 = false;
            			}
HXDLIN(2040)			if (_hx_tmp3) {
HXLINE(2042)				this->lastAction = HX_("delete",2b,c0,d8,6a);
HXLINE(2043)				::Array< ::Dynamic> notesToBeDeleted = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2044)				this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2045)				{
HXLINE(2045)					int _g = 0;
HXDLIN(2045)					int _g1 = this->selectedBoxes->members->get_length();
HXDLIN(2045)					while((_g < _g1)){
HXLINE(2045)						_g = (_g + 1);
HXDLIN(2045)						int i = (_g - 1);
HXLINE(2047)						this->deletedNotes->push(::cpp::VirtualArray_obj::__new(3)->init(0,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->strumTime)->init(1,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->rawNoteData)->init(2,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->sustainLength));
HXLINE(2048)						notesToBeDeleted->push(Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote);
            					}
            				}
HXLINE(2051)				{
HXLINE(2051)					int _g2 = 0;
HXDLIN(2051)					while((_g2 < notesToBeDeleted->length)){
HXLINE(2051)						 ::Note i = notesToBeDeleted->__get(_g2).StaticCast<  ::Note >();
HXDLIN(2051)						_g2 = (_g2 + 1);
HXLINE(2053)						this->deleteNote(i);
            					}
            				}
            			}
HXLINE(2057)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2057)			if (_this3->keyManager->checkStatus(46,_this3->status)) {
HXLINE(2059)				this->lastAction = HX_("delete",2b,c0,d8,6a);
HXLINE(2060)				::Array< ::Dynamic> notesToBeDeleted = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2061)				this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2062)				{
HXLINE(2062)					int _g = 0;
HXDLIN(2062)					int _g1 = this->selectedBoxes->members->get_length();
HXDLIN(2062)					while((_g < _g1)){
HXLINE(2062)						_g = (_g + 1);
HXDLIN(2062)						int i = (_g - 1);
HXLINE(2064)						this->deletedNotes->push(::cpp::VirtualArray_obj::__new(3)->init(0,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->strumTime)->init(1,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->rawNoteData)->init(2,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->sustainLength));
HXLINE(2065)						notesToBeDeleted->push(Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote);
            					}
            				}
HXLINE(2068)				{
HXLINE(2068)					int _g2 = 0;
HXDLIN(2068)					while((_g2 < notesToBeDeleted->length)){
HXLINE(2068)						 ::Note i = notesToBeDeleted->__get(_g2).StaticCast<  ::Note >();
HXDLIN(2068)						_g2 = (_g2 + 1);
HXLINE(2070)						this->deleteNote(i);
            					}
            				}
            			}
HXLINE(2076)			bool _hx_tmp4;
HXDLIN(2076)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2076)			if (_this4->keyManager->checkStatus(17,_this4->status)) {
HXLINE(2076)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2076)				_hx_tmp4 = _this->keyManager->checkStatus(67,_this->status);
            			}
            			else {
HXLINE(2076)				_hx_tmp4 = false;
            			}
HXDLIN(2076)			if (_hx_tmp4) {
HXLINE(2078)				if ((this->selectedBoxes->members->get_length() != 0)) {
HXLINE(2080)					this->copiedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2081)					{
HXLINE(2081)						int _g = 0;
HXDLIN(2081)						::Array< ::Dynamic> _g1 = this->selectedBoxes->members;
HXDLIN(2081)						while((_g < _g1->length)){
HXLINE(2081)							 ::ChartingBox i = _g1->__get(_g).StaticCast<  ::ChartingBox >();
HXDLIN(2081)							_g = (_g + 1);
HXLINE(2082)							this->copiedNotes->push(::cpp::VirtualArray_obj::__new(5)->init(0,i->connectedNote->strumTime)->init(1,i->connectedNote->rawNoteData)->init(2,i->connectedNote->sustainLength)->init(3,i->connectedNote->isAlt)->init(4,i->connectedNote->beat));
            						}
            					}
HXLINE(2084)					int firstNote = ( (int)(::cpp::VirtualArray( this->copiedNotes->__get(0))->__get(0)) );
HXLINE(2086)					{
HXLINE(2086)						int _g2 = 0;
HXDLIN(2086)						::Array< ::Dynamic> _g3 = this->copiedNotes;
HXDLIN(2086)						while((_g2 < _g3->length)){
HXLINE(2086)							::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2086)							_g2 = (_g2 + 1);
HXLINE(2088)							i->set(0,(( (Float)(i->__get(0)) ) - ( (Float)(firstNote) )));
            						}
            					}
            				}
            			}
HXLINE(2096)			bool _hx_tmp5;
HXDLIN(2096)			 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2096)			if (_this5->keyManager->checkStatus(17,_this5->status)) {
HXLINE(2096)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2096)				_hx_tmp5 = _this->keyManager->checkStatus(86,_this->status);
            			}
            			else {
HXLINE(2096)				_hx_tmp5 = false;
            			}
HXDLIN(2096)			if (_hx_tmp5) {
HXLINE(2098)				if ((this->copiedNotes->length != 0)) {
HXLINE(2100)					while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(2102)						Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(2103)						Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(2104)						this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            					}
HXLINE(2109)					this->pasteNotesFromArray(this->copiedNotes,null());
HXLINE(2111)					this->lastAction = HX_("paste",53,53,56,bd);
            				}
            			}
HXLINE(2116)			bool _hx_tmp6;
HXDLIN(2116)			 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2116)			if (_this6->keyManager->checkStatus(17,_this6->status)) {
HXLINE(2116)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2116)				_hx_tmp6 = _this->keyManager->checkStatus(90,_this->status);
            			}
            			else {
HXLINE(2116)				_hx_tmp6 = false;
            			}
HXDLIN(2116)			if (_hx_tmp6) {
HXLINE(2118)				::String _hx_switch_0 = this->lastAction;
            				if (  (_hx_switch_0==HX_("delete",2b,c0,d8,6a)) ){
HXLINE(2134)					if ((this->deletedNotes->length != 0)) {
HXLINE(2137)						this->pasteNotesFromArray(this->deletedNotes,false);
HXLINE(2138)						this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
            					}
HXLINE(2134)					goto _hx_goto_107;
            				}
            				if (  (_hx_switch_0==HX_("paste",53,53,56,bd)) ){
HXLINE(2122)					if ((this->pastedNotes->length != 0)) {
HXLINE(2124)						{
HXLINE(2124)							int _g = 0;
HXDLIN(2124)							::Array< ::Dynamic> _g1 = this->pastedNotes;
HXDLIN(2124)							while((_g < _g1->length)){
HXLINE(2124)								 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(2124)								_g = (_g + 1);
HXLINE(2126)								if (this->curRenderedNotes->members->contains(i)) {
HXLINE(2127)									this->deleteNote(i);
            								}
            							}
            						}
HXLINE(2130)						this->pastedNotes = ::Array_obj< ::Dynamic>::__new(0);
            					}
HXLINE(2122)					goto _hx_goto_107;
            				}
            				_hx_goto_107:;
            			}
            		}
HXLINE(2144)		if ((this->updateFrame == 4)) {
HXLINE(2146)			::TimingStruct_obj::clearTimings();
HXLINE(2148)			int currentIndex = 0;
HXLINE(2149)			{
HXLINE(2149)				int _g = 0;
HXDLIN(2149)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2149)				while((_g < _g1->length)){
HXLINE(2149)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2149)					_g = (_g + 1);
HXLINE(2151)					if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(2153)						Float beat = i->position;
HXLINE(2155)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(2157)						::TimingStruct_obj::addTiming(beat,i->value,endBeat,( (Float)(0) ));
HXLINE(2159)						if ((currentIndex != 0)) {
HXLINE(2161)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(2162)							data->endBeat = beat;
HXLINE(2163)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(2164)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2165)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(2166)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE(2169)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE(2173)			this->recalculateAllSectionTimes();
HXLINE(2175)			this->regenerateLines();
HXLINE(2176)			this->updateFrame++;
            		}
            		else {
HXLINE(2178)			if ((this->updateFrame != 5)) {
HXLINE(2179)				this->updateFrame++;
            			}
            		}
HXLINE(2181)		::String _hx_tmp;
HXDLIN(2181)		if (this->doSnapShit) {
HXLINE(2181)			_hx_tmp = HX_("Shift to disable, CTRL Left or Right to increase/decrease",ae,d3,9e,8a);
            		}
            		else {
HXLINE(2181)			_hx_tmp = HX_("Snap Disabled, Shift to renable.",da,50,0f,a9);
            		}
HXDLIN(2181)		this->snapText->set_text((((((HX_("Snap: 1/",6e,d2,81,d5) + this->snap) + HX_(" (",08,1c,00,00)) + _hx_tmp) + HX_(")\nAdd Notes: 1-8 (or click)\nZoom: ",62,5f,a9,ab)) + this->zoomFactor));
HXLINE(2184)		bool _hx_tmp1;
HXDLIN(2184)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2184)		if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(2184)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2184)			_hx_tmp1 = _this->keyManager->checkStatus(17,_this->status);
            		}
            		else {
HXLINE(2184)			_hx_tmp1 = false;
            		}
HXDLIN(2184)		if (_hx_tmp1) {
HXLINE(2186)			this->snapSelection++;
HXLINE(2187)			int index = 6;
HXLINE(2188)			if ((this->snapSelection > 6)) {
HXLINE(2189)				this->snapSelection = 6;
            			}
HXLINE(2190)			if ((this->snapSelection < 0)) {
HXLINE(2191)				this->snapSelection = 0;
            			}
HXLINE(2192)			{
HXLINE(2192)				 ::Dynamic v = this->deezNuts->keys();
HXDLIN(2192)				while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2192)					int v1 = ( (int)(v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2194)					if ((index == this->snapSelection)) {
HXLINE(2197)						this->snap = v1;
            					}
HXLINE(2199)					index = (index - 1);
            				}
            			}
            		}
HXLINE(2203)		bool _hx_tmp2;
HXDLIN(2203)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2203)		if (_this1->keyManager->checkStatus(37,_this1->status)) {
HXLINE(2203)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2203)			_hx_tmp2 = _this->keyManager->checkStatus(17,_this->status);
            		}
            		else {
HXLINE(2203)			_hx_tmp2 = false;
            		}
HXDLIN(2203)		if (_hx_tmp2) {
HXLINE(2205)			this->snapSelection--;
HXLINE(2206)			if ((this->snapSelection > 6)) {
HXLINE(2207)				this->snapSelection = 6;
            			}
HXLINE(2208)			if ((this->snapSelection < 0)) {
HXLINE(2209)				this->snapSelection = 0;
            			}
HXLINE(2210)			int index = 6;
HXLINE(2211)			{
HXLINE(2211)				 ::Dynamic v = this->deezNuts->keys();
HXDLIN(2211)				while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2211)					int v1 = ( (int)(v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2213)					if ((index == this->snapSelection)) {
HXLINE(2216)						this->snap = v1;
            					}
HXLINE(2218)					index = (index - 1);
            				}
            			}
            		}
HXLINE(2223)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2223)		if (_this2->keyManager->checkStatus(16,_this2->status)) {
HXLINE(2224)			this->doSnapShit = !(this->doSnapShit);
            		}
HXLINE(2227)		this->doSnapShit = this->defaultSnap;
HXLINE(2228)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2228)		if (_this3->keyManager->checkStatus(16,_this3->status)) {
HXLINE(2230)			this->doSnapShit = !(this->defaultSnap);
            		}
HXLINE(2234)		this->check_snap->set_checked(this->doSnapShit);
HXLINE(2236)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2237)		::ChartingState_obj::_song->__SetField(HX_("song",d5,23,58,4c),this->typingShit->text,::hx::paccDynamic);
HXLINE(2240)		 ::TimingStruct timingSeg = ::TimingStruct_obj::getTimingAtTimestamp(::Conductor_obj::songPosition);
HXLINE(2242)		Float start = ::Conductor_obj::songPosition;
HXLINE(2244)		if (::hx::IsNotNull( timingSeg )) {
HXLINE(2246)			Float timingSegBpm = timingSeg->bpm;
HXLINE(2247)			this->currentBPM = timingSegBpm;
HXLINE(2249)			if ((this->currentBPM != ::Conductor_obj::bpm)) {
HXLINE(2252)				::Conductor_obj::changeBPM(this->currentBPM,false);
            			}
HXLINE(2255)			Float pog = ((this->curDecimalBeat - timingSeg->startBeat) / (::Conductor_obj::bpm / ( (Float)(60) )));
HXLINE(2257)			start = ((timingSeg->startTime + pog) * ( (Float)(1000) ));
            		}
HXLINE(2261)		 ::Dynamic weird = this->getSectionByTime(start,true);
HXLINE(2265)		if (::hx::IsNotNull( weird )) {
HXLINE(2267)			 ::Dynamic _hx_tmp = this->lastUpdatedSection;
HXDLIN(2267)			if (::hx::IsNotEq( _hx_tmp,this->getSectionByTime(start,true) )) {
HXLINE(2269)				this->lastUpdatedSection = weird;
HXLINE(2270)				this->check_mustHitSection->set_checked(( (bool)(weird->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2271)				this->check_CPUAltAnim->set_checked(( (bool)(weird->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(2272)				this->check_playerAltAnim->set_checked(( (bool)(weird->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            			}
            		}
HXLINE(2277)		 ::flixel::FlxSprite _hx_tmp3 = this->strumLine;
HXDLIN(2277)		Float _hx_tmp4 = this->getYfromStrum(start);
HXDLIN(2277)		_hx_tmp3->set_y((_hx_tmp4 * this->zoomFactor));
HXLINE(2278)		this->camFollow->set_y(this->strumLine->y);
HXLINE(2281)		 ::flixel::text::FlxText _hx_tmp5 = this->bpmTxt;
HXDLIN(2281)		::String _hx_tmp6 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::Conductor_obj::songPosition / ( (Float)(1000) )),2)) + HX_(" / ",31,71,18,00));
HXDLIN(2281)		::String _hx_tmp7 = ((_hx_tmp6 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),2))) + HX_("\nCur Section: ",a1,0e,22,7f));
HXDLIN(2281)		::String _hx_tmp8 = ((((_hx_tmp7 + this->curSection) + HX_("\nCurBPM: ",cf,5b,2e,01)) + this->currentBPM) + HX_("\nCurBeat: ",d2,85,30,2c));
HXDLIN(2281)		::String _hx_tmp9 = ((_hx_tmp8 + ::HelperFunctions_obj::truncateFloat(this->curDecimalBeat,3)) + HX_("\nCurStep: ",28,2d,e6,9d));
HXDLIN(2281)		::String _hx_tmp10 = ((_hx_tmp9 + this->curStep) + HX_("\nZoom: ",23,18,21,cf));
HXDLIN(2281)		::String _hx_tmp11 = ((_hx_tmp10 + ::HelperFunctions_obj::truncateFloat(this->zoomFactor,2)) + HX_("\nSpeed: ",03,97,ed,e9));
HXDLIN(2281)		_hx_tmp5->set_text((_hx_tmp11 + ::HelperFunctions_obj::truncateFloat(this->speed,1)));
HXLINE(2298)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2298)		bool left = _this4->keyManager->checkStatus(49,_this4->status);
HXLINE(2299)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2299)		bool down = _this5->keyManager->checkStatus(50,_this5->status);
HXLINE(2300)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2300)		bool up = _this6->keyManager->checkStatus(51,_this6->status);
HXLINE(2301)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2301)		bool right = _this7->keyManager->checkStatus(52,_this7->status);
HXLINE(2302)		 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2302)		bool leftO = _this8->keyManager->checkStatus(53,_this8->status);
HXLINE(2303)		 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2303)		bool downO = _this9->keyManager->checkStatus(54,_this9->status);
HXLINE(2304)		 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2304)		bool upO = _this10->keyManager->checkStatus(55,_this10->status);
HXLINE(2305)		 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2305)		bool rightO = _this11->keyManager->checkStatus(56,_this11->status);
HXLINE(2307)		::Array< bool > pressArray = ::Array_obj< bool >::__new(8)->init(0,left)->init(1,down)->init(2,up)->init(3,right)->init(4,leftO)->init(5,downO)->init(6,upO)->init(7,rightO);
HXLINE(2308)		::Array< bool > _hx_delete = ::Array_obj< bool >::fromData( _hx_array_data_9bdde08d_118,1);
HXLINE(2309)		if (doInput) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis,::Array< bool >,_hx_delete,::Array< bool >,pressArray) HXARGC(1)
            			void _hx_run( ::Note note){
            				HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2313_update)
HXLINE(2313)				bool _hx_tmp;
HXDLIN(2313)				if (_gthis->strumLine->overlaps(note,null(),null())) {
HXLINE(2313)					_hx_tmp = pressArray->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(note->rawNoteData) ))));
            				}
            				else {
HXLINE(2313)					_hx_tmp = false;
            				}
HXDLIN(2313)				if (_hx_tmp) {
HXLINE(2315)					_gthis->deleteNote(note);
HXLINE(2316)					_hx_delete[0] = true;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2311)			this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis,_hx_delete,pressArray)),null());
HXLINE(2320)			{
HXLINE(2320)				int _g = 0;
HXDLIN(2320)				int _g1 = pressArray->length;
HXDLIN(2320)				while((_g < _g1)){
HXLINE(2320)					_g = (_g + 1);
HXDLIN(2320)					int p = (_g - 1);
HXLINE(2322)					bool i = pressArray->__get(p);
HXLINE(2323)					bool _hx_tmp;
HXDLIN(2323)					if (i) {
HXLINE(2323)						_hx_tmp = !(_hx_delete->__get(0));
            					}
            					else {
HXLINE(2323)						_hx_tmp = false;
            					}
HXDLIN(2323)					if (_hx_tmp) {
HXLINE(2325)						this->addNote( ::Note_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,p,null(),null(),null(),null(),null()));
            					}
            				}
            			}
            		}
HXLINE(2332)		if (this->playClaps) {
HXLINE(2334)			int _g = 0;
HXDLIN(2334)			::Array< ::Dynamic> _g1 = this->shownNotes;
HXDLIN(2334)			while((_g < _g1->length)){
HXLINE(2334)				 ::Note note = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(2334)				_g = (_g + 1);
HXLINE(2336)				bool _hx_tmp;
HXDLIN(2336)				bool _hx_tmp1;
HXDLIN(2336)				if ((note->strumTime <= ::Conductor_obj::songPosition)) {
HXLINE(2336)					_hx_tmp1 = !(this->claps->contains(note));
            				}
            				else {
HXLINE(2336)					_hx_tmp1 = false;
            				}
HXDLIN(2336)				if (_hx_tmp1) {
HXLINE(2336)					_hx_tmp = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            				}
            				else {
HXLINE(2336)					_hx_tmp = false;
            				}
HXDLIN(2336)				if (_hx_tmp) {
HXLINE(2338)					this->claps->push(note);
HXLINE(2339)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2339)					_hx_tmp->play(::Paths_obj::sound(HX_("SNAP",4a,1e,18,37),null()),null(),null(),null(),null(),null());
            				}
            			}
            		}
HXLINE(2417)		bool _hx_tmp12;
HXDLIN(2417)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(2417)			_hx_tmp12 = !(this->waitingForRelease);
            		}
            		else {
HXLINE(2417)			_hx_tmp12 = false;
            		}
HXDLIN(2417)		if (_hx_tmp12) {
HXLINE(2419)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::Note note){
            					HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2423_update)
HXLINE(2423)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE(2425)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2425)						if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(2427)							_gthis->selectNote(note,false);
            						}
            						else {
HXLINE(2431)							_gthis->deleteNote(note);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2421)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            			}
            			else {
HXLINE(2438)				bool _hx_tmp;
HXDLIN(2438)				bool _hx_tmp1;
HXDLIN(2438)				bool _hx_tmp2;
HXDLIN(2438)				if ((::flixel::FlxG_obj::mouse->x > 0)) {
HXLINE(2439)					int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXLINE(2438)					_hx_tmp2 = (_hx_tmp < this->gridBG->get_width());
            				}
            				else {
HXLINE(2438)					_hx_tmp2 = false;
            				}
HXDLIN(2438)				if (_hx_tmp2) {
HXLINE(2438)					_hx_tmp1 = (::flixel::FlxG_obj::mouse->y > 0);
            				}
            				else {
HXLINE(2438)					_hx_tmp1 = false;
            				}
HXDLIN(2438)				if (_hx_tmp1) {
HXLINE(2438)					_hx_tmp = (::flixel::FlxG_obj::mouse->y < this->height);
            				}
            				else {
HXLINE(2438)					_hx_tmp = false;
            				}
HXDLIN(2438)				if (_hx_tmp) {
HXLINE(2444)					this->addNote(null());
            				}
            			}
            		}
HXLINE(2449)		bool _hx_tmp13;
HXDLIN(2449)		bool _hx_tmp14;
HXDLIN(2449)		bool _hx_tmp15;
HXDLIN(2449)		if ((::flixel::FlxG_obj::mouse->x > 0)) {
HXLINE(2450)			int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXLINE(2449)			_hx_tmp15 = (_hx_tmp < this->gridBG->get_width());
            		}
            		else {
HXLINE(2449)			_hx_tmp15 = false;
            		}
HXDLIN(2449)		if (_hx_tmp15) {
HXLINE(2449)			_hx_tmp14 = (::flixel::FlxG_obj::mouse->y > 0);
            		}
            		else {
HXLINE(2449)			_hx_tmp14 = false;
            		}
HXDLIN(2449)		if (_hx_tmp14) {
HXLINE(2449)			_hx_tmp13 = (::flixel::FlxG_obj::mouse->y < this->height);
            		}
            		else {
HXLINE(2449)			_hx_tmp13 = false;
            		}
HXDLIN(2449)		if (_hx_tmp13) {
HXLINE(2454)			this->dummyArrow->set_visible(true);
HXLINE(2456)			this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXLINE(2458)			if (this->doSnapShit) {
HXLINE(2460)				Float time = this->getStrumTime((( (Float)(::flixel::FlxG_obj::mouse->y) ) / this->zoomFactor));
HXLINE(2462)				Float beat = ::TimingStruct_obj::getBeatFromTime(time);
HXLINE(2463)				int snapped = ::Math_obj::round((beat * this->deezNuts->get_float(this->snap)));
HXDLIN(2463)				Float snapped1 = (( (Float)(snapped) ) / this->deezNuts->get_float(this->snap));
HXLINE(2465)				 ::flixel::FlxSprite _hx_tmp = this->dummyArrow;
HXDLIN(2465)				Float _hx_tmp1 = this->getYfromStrum(::TimingStruct_obj::getTimeFromBeat(snapped1));
HXDLIN(2465)				_hx_tmp->set_y((_hx_tmp1 * this->zoomFactor));
            			}
            			else {
HXLINE(2469)				this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            			}
            		}
            		else {
HXLINE(2474)			this->dummyArrow->set_visible(false);
            		}
HXLINE(2477)		if (doInput) {
HXLINE(2479)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2479)			if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(2481)				::ChartingState_obj::lastSection = this->curSection;
HXLINE(2483)				::PlayState_obj::SONG = ::ChartingState_obj::_song;
HXLINE(2484)				{
HXLINE(2484)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2484)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2485)				if (!(::PlayState_obj::isSM)) {
HXLINE(2486)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2486)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2487)				{
HXLINE(2487)					 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2487)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2487)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
HXLINE(2490)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2490)			if (_this1->keyManager->checkStatus(69,_this1->status)) {
HXLINE(2492)				Float _hx_tmp;
HXDLIN(2492)				if (::hx::IsNotNull( timingSeg )) {
HXLINE(2492)					_hx_tmp = timingSeg->bpm;
            				}
            				else {
HXLINE(2492)					_hx_tmp = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXDLIN(2492)				this->changeNoteSustain((((( (Float)(60) ) / _hx_tmp) * ( (Float)(1000) )) / ( (Float)(4) )));
            			}
HXLINE(2494)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2494)			if (_this2->keyManager->checkStatus(81,_this2->status)) {
HXLINE(2496)				Float _hx_tmp;
HXDLIN(2496)				if (::hx::IsNotNull( timingSeg )) {
HXLINE(2496)					_hx_tmp = timingSeg->bpm;
            				}
            				else {
HXLINE(2496)					_hx_tmp = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXDLIN(2496)				this->changeNoteSustain(-((((( (Float)(60) ) / _hx_tmp) * ( (Float)(1000) )) / ( (Float)(4) ))));
            			}
HXLINE(2499)			bool _hx_tmp;
HXDLIN(2499)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2499)			if (_this3->keyManager->checkStatus(67,_this3->status)) {
HXLINE(2499)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2499)				_hx_tmp = !(_this->keyManager->checkStatus(17,_this->status));
            			}
            			else {
HXLINE(2499)				_hx_tmp = false;
            			}
HXDLIN(2499)			if (_hx_tmp) {
HXLINE(2501)				 ::Dynamic sect =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE(2505)				sect->__SetField(HX_("mustHitSection",3b,5f,87,62),!(( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE(2506)				this->check_mustHitSection->set_checked(( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2507)				 ::SectionRender i = Dynamic( this->sectionRenderes->members->__get(this->curSection)).StaticCast<  ::SectionRender >();
HXLINE(2508)				Float cachedY = i->icon->y;
HXLINE(2509)				this->remove(i->icon,null());
HXLINE(2510)				 ::flixel::FlxSprite sectionicon;
HXDLIN(2510)				if (( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2510)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
            				else {
HXLINE(2510)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
HXLINE(2511)				sectionicon->set_x(( (Float)(-95) ));
HXLINE(2512)				sectionicon->set_y(cachedY);
HXLINE(2513)				sectionicon->setGraphicSize(0,45);
HXLINE(2515)				i->icon = sectionicon;
HXLINE(2516)				i->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(2518)				this->add(sectionicon);
            			}
HXLINE(2522)			bool _hx_tmp1;
HXDLIN(2522)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2522)			if (_this4->keyManager->checkStatus(86,_this4->status)) {
HXLINE(2522)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2522)				_hx_tmp1 = !(_this->keyManager->checkStatus(17,_this->status));
            			}
            			else {
HXLINE(2522)				_hx_tmp1 = false;
            			}
HXDLIN(2522)			if (_hx_tmp1) {
HXLINE(2525)				 ::Dynamic secit =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE(2527)				if (::hx::IsNotNull( secit )) {
HXLINE(2529)					::Array< ::Dynamic> newSwaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2531)					{
HXLINE(2531)						int _g = 0;
HXDLIN(2531)						int _g1 = ( (::Array< ::Dynamic>)(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(2531)						while((_g < _g1)){
HXLINE(2531)							_g = (_g + 1);
HXDLIN(2531)							int i = (_g - 1);
HXLINE(2533)							::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE(2534)							if (::hx::IsLess( note->__get(1),4 )) {
HXLINE(2535)								::cpp::VirtualArray note1 = note;
HXDLIN(2535)								int _hx_tmp = 1;
HXDLIN(2535)								note1->set(_hx_tmp,(note1->__get(_hx_tmp) + 4));
            							}
            							else {
HXLINE(2537)								::cpp::VirtualArray note1 = note;
HXDLIN(2537)								int _hx_tmp = 1;
HXDLIN(2537)								note1->set(_hx_tmp,(note1->__get(_hx_tmp) - 4));
            							}
HXLINE(2538)							newSwaps->push(note);
            						}
            					}
HXLINE(2541)					secit->__SetField(HX_("sectionNotes",1c,c8,a7,fe),newSwaps,::hx::paccDynamic);
HXLINE(2543)					{
HXLINE(2543)						int _g2 = 0;
HXDLIN(2543)						::Array< ::Dynamic> _g3 = this->shownNotes;
HXDLIN(2543)						while((_g2 < _g3->length)){
HXLINE(2543)							 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(2543)							_g2 = (_g2 + 1);
HXLINE(2545)							{
HXLINE(2545)								int _g = 0;
HXDLIN(2545)								while((_g < newSwaps->length)){
HXLINE(2545)									::cpp::VirtualArray ii = ::cpp::VirtualArray( newSwaps->__get(_g));
HXDLIN(2545)									_g = (_g + 1);
HXLINE(2546)									bool _hx_tmp;
HXDLIN(2546)									if (::hx::IsEq( i->strumTime,ii->__get(0) )) {
HXLINE(2546)										_hx_tmp = (i->noteData == ::hx::Mod(ii->__get(1),4));
            									}
            									else {
HXLINE(2546)										_hx_tmp = false;
            									}
HXDLIN(2546)									if (_hx_tmp) {
HXLINE(2548)										i->set_x(( (Float)(::Math_obj::floor((( (Float)(ii->__get(1)) ) * ( (Float)(this->GRID_SIZE) )))) ));
HXLINE(2550)										Float _hx_tmp = this->getYfromStrum(( (Float)(ii->__get(0)) ));
HXDLIN(2550)										i->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(2551)										bool _hx_tmp1;
HXDLIN(2551)										if ((i->sustainLength > 0)) {
HXLINE(2551)											_hx_tmp1 = ::hx::IsNotNull( i->noteCharterObject );
            										}
            										else {
HXLINE(2551)											_hx_tmp1 = false;
            										}
HXDLIN(2551)										if (_hx_tmp1) {
HXLINE(2552)											i->noteCharterObject->set_x((i->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(2558)			 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2558)			if (_this5->keyManager->checkStatus(9,_this5->status)) {
HXLINE(2560)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2560)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(2562)					{
HXLINE(2562)						 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(2562)						_g->set_selected_tab((_g->get_selected_tab() - 1));
            					}
HXLINE(2563)					if ((this->UI_box->get_selected_tab() < 0)) {
HXLINE(2564)						this->UI_box->set_selected_tab(2);
            					}
            				}
            				else {
HXLINE(2568)					{
HXLINE(2568)						 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(2568)						_g->set_selected_tab((_g->get_selected_tab() + 1));
            					}
HXLINE(2569)					if ((this->UI_box->get_selected_tab() >= 3)) {
HXLINE(2570)						this->UI_box->set_selected_tab(0);
            					}
            				}
            			}
HXLINE(2574)			if (!(this->typingShit->hasFocus)) {
HXLINE(2578)				int shiftThing = 1;
HXLINE(2579)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2579)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(2580)					shiftThing = 4;
            				}
HXLINE(2581)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2581)				if (_this1->keyManager->checkStatus(32,_this1->status)) {
HXLINE(2583)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2585)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(2586)						if (!(::PlayState_obj::isSM)) {
HXLINE(2587)							this->vocals->pause();
            						}
HXLINE(2588)						this->claps->removeRange(0,this->claps->length);
            					}
            					else {
HXLINE(2592)						if (!(::PlayState_obj::isSM)) {
HXLINE(2593)							this->vocals->play(null(),null(),null());
            						}
HXLINE(2594)						::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            					}
            				}
HXLINE(2599)				bool _hx_tmp;
HXDLIN(2599)				if (!((::flixel::FlxG_obj::sound->music->_time < 0))) {
HXLINE(2599)					_hx_tmp = (this->curDecimalBeat < 0);
            				}
            				else {
HXLINE(2599)					_hx_tmp = true;
            				}
HXDLIN(2599)				if (_hx_tmp) {
HXLINE(2600)					::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            				}
HXLINE(2602)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2602)				if (!(_this2->keyManager->checkStatus(16,_this2->status))) {
HXLINE(2604)					bool _hx_tmp;
HXDLIN(2604)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2604)					if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE(2604)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2604)						_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            					}
            					else {
HXLINE(2604)						_hx_tmp = true;
            					}
HXDLIN(2604)					if (_hx_tmp) {
HXLINE(2606)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(2607)						if (!(::PlayState_obj::isSM)) {
HXLINE(2608)							this->vocals->pause();
            						}
HXLINE(2609)						this->claps->removeRange(0,this->claps->length);
HXLINE(2611)						Float daTime = (( (Float)(700) ) * ::flixel::FlxG_obj::elapsed);
HXLINE(2613)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2613)						if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE(2615)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2615)							_g->set_time((_g->_time - daTime));
            						}
            						else {
HXLINE(2618)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2618)							_g->set_time((_g->_time + daTime));
            						}
HXLINE(2620)						if (!(::PlayState_obj::isSM)) {
HXLINE(2621)							this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            						}
            					}
            				}
            				else {
HXLINE(2626)					bool _hx_tmp;
HXDLIN(2626)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2626)					if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE(2626)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2626)						_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            					}
            					else {
HXLINE(2626)						_hx_tmp = true;
            					}
HXDLIN(2626)					if (_hx_tmp) {
HXLINE(2628)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(2629)						if (!(::PlayState_obj::isSM)) {
HXLINE(2630)							this->vocals->pause();
            						}
HXLINE(2632)						Float daTime = (::Conductor_obj::stepCrochet * ( (Float)(2) ));
HXLINE(2634)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2634)						if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE(2636)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2636)							_g->set_time((_g->_time - daTime));
            						}
            						else {
HXLINE(2639)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2639)							_g->set_time((_g->_time + daTime));
            						}
HXLINE(2641)						if (!(::PlayState_obj::isSM)) {
HXLINE(2642)							this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            						}
            					}
            				}
            			}
            		}
HXLINE(2647)		::ChartingState_obj::_song->__SetField(HX_("bpm",df,be,4a,00),this->tempBpm,::hx::paccDynamic);
HXLINE(2653)		this->super::update(elapsed);
            	}


void ChartingState_obj::changeNoteSustain(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2657_changeNoteSustain)
HXLINE(2658)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2660)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(2662)				::cpp::VirtualArray _hx_tmp = this->curSelectedNote;
HXDLIN(2662)				int _hx_tmp1 = 2;
HXDLIN(2662)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + value));
HXLINE(2663)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
HXLINE(2665)				if (::hx::IsNotNull( this->curSelectedNoteObject->noteCharterObject )) {
HXLINE(2666)					this->curRenderedSustains->remove(this->curSelectedNoteObject->noteCharterObject,null()).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(2668)				 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->curSelectedNoteObject->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(this->curSelectedNoteObject->y + this->GRID_SIZE),null());
HXLINE(2669)				Float sustainVis1 = this->getYfromStrum(( (Float)((this->curSelectedNoteObject->strumTime + this->curSelectedNote->__get(2))) ));
HXLINE(2668)				 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - this->curSelectedNoteObject->y)),null(),null(),null());
HXLINE(2670)				this->curSelectedNoteObject->sustainLength = ( (Float)(this->curSelectedNote->__get(2)) );
HXLINE(2672)				this->curSelectedNoteObject->noteCharterObject = sustainVis2;
HXLINE(2674)				this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE(2678)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeNoteSustain,(void))

void ChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2684_resetSection)
HXLINE(2685)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(2686)		if (!(::PlayState_obj::isSM)) {
HXLINE(2687)			this->vocals->pause();
            		}
HXLINE(2690)		::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(2692)		if (!(::PlayState_obj::isSM)) {
HXLINE(2693)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(2695)		this->updateGrid();
HXLINE(2696)		if (!(songBeginning)) {
HXLINE(2697)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,resetSection,(void))

void ChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2704_changeSection)
HXDLIN(2704)		if (::hx::IsNotNull(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE(2707)			this->curSection = sec;
HXLINE(2709)			this->updateGrid();
HXLINE(2711)			if (( (bool)(updateMusic) )) {
HXLINE(2713)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2714)				if (!(::PlayState_obj::isSM)) {
HXLINE(2715)					this->vocals->pause();
            				}
HXLINE(2725)				 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(2725)				_hx_tmp->set_time(this->sectionStartTime(null()));
HXLINE(2726)				if (!(::PlayState_obj::isSM)) {
HXLINE(2727)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
HXLINE(2728)				this->updateCurStep();
            			}
HXLINE(2731)			this->updateGrid();
HXLINE(2732)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeSection,(void))

void ChartingState_obj::copySection( ::Dynamic __o_sectionNum){
            		 ::Dynamic sectionNum = __o_sectionNum;
            		if (::hx::IsNull(__o_sectionNum)) sectionNum = 1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2739_copySection)
HXLINE(2740)		int a = this->curSection;
HXDLIN(2740)		int b = ( (int)(sectionNum) );
HXDLIN(2740)		int daSec;
HXDLIN(2740)		if ((a > b)) {
HXLINE(2740)			daSec = a;
            		}
            		else {
HXLINE(2740)			daSec = b;
            		}
HXLINE(2741)		 ::Dynamic sect = this->lastUpdatedSection;
HXLINE(2743)		if (::hx::IsNull( sect )) {
HXLINE(2744)			return;
            		}
HXLINE(2746)		{
HXLINE(2746)			int _g = 0;
HXDLIN(2746)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - ( (int)(sectionNum) )))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2746)			while((_g < _g1->length)){
HXLINE(2746)				::cpp::VirtualArray note = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(2746)				_g = (_g + 1);
HXLINE(2748)				 ::Dynamic strum = (note->__get(0) + (::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * ( (int)(sectionNum) ))) )));
HXLINE(2750)				::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(4)->init(0,strum)->init(1,note->__get(1))->init(2,note->__get(2))->init(3,note->__get(3));
HXLINE(2751)				( (::Array< ::Dynamic>)(sect->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            			}
            		}
HXLINE(2754)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,copySection,(void))

void ChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2758_updateSectionUI)
HXLINE(2759)		 ::Dynamic sec = this->getSectionByTime(::Conductor_obj::songPosition,null());
HXLINE(2761)		if (::hx::IsNull( sec )) {
HXLINE(2763)			this->check_mustHitSection->set_checked(true);
HXLINE(2764)			this->check_CPUAltAnim->set_checked(false);
HXLINE(2765)			this->check_playerAltAnim->set_checked(false);
            		}
            		else {
HXLINE(2769)			this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2770)			this->check_CPUAltAnim->set_checked(( (bool)(sec->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(2771)			this->check_playerAltAnim->set_checked(( (bool)(sec->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSectionUI,(void))

void ChartingState_obj::updateHeads(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2777_updateHeads)
HXDLIN(2777)		if (this->check_mustHitSection->checked) {
HXLINE(2779)			::ChartingState_obj::leftIcon->animation->play(( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
HXLINE(2780)			::ChartingState_obj::rightIcon->animation->play(( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            		}
            		else {
HXLINE(2784)			::ChartingState_obj::leftIcon->animation->play(( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
HXLINE(2785)			::ChartingState_obj::rightIcon->animation->play(( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateHeads,(void))

void ChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2791_updateNoteUI)
HXDLIN(2791)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2793)			this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
HXLINE(2794)			if (::hx::IsNotNull( this->curSelectedNote->__get(3) )) {
HXLINE(2795)				this->check_naltAnim->set_checked(( (bool)(this->curSelectedNote->__get(3)) ));
            			}
            			else {
HXLINE(2798)				this->curSelectedNote->set(3,false);
HXLINE(2799)				this->check_naltAnim->set_checked(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNoteUI,(void))

void ChartingState_obj::updateGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2805_updateGrid)
HXLINE(2806)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(2808)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(2811)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(2813)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(2830)		int currentSection = 0;
HXLINE(2832)		{
HXLINE(2832)			int _g = 0;
HXDLIN(2832)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2832)			while((_g < _g1->length)){
HXLINE(2832)				 ::Dynamic section = _g1->__get(_g);
HXDLIN(2832)				_g = (_g + 1);
HXLINE(2834)				{
HXLINE(2834)					int _g2 = 0;
HXDLIN(2834)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2834)					while((_g2 < _g3->length)){
HXLINE(2834)						::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2834)						_g2 = (_g2 + 1);
HXLINE(2836)						 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtTimestamp(( (Float)(i->__get(0)) ));
HXLINE(2837)						int daNoteInfo = ( (int)(i->__get(1)) );
HXLINE(2838)						Float daStrumTime = ( (Float)(i->__get(0)) );
HXLINE(2839)						Float daSus = ( (Float)(i->__get(2)) );
HXLINE(2841)						 ::Note note =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,::hx::Mod(daNoteInfo,4),null(),false,true,i->__get(3),i->__get(4));
HXLINE(2842)						note->rawNoteData = daNoteInfo;
HXLINE(2843)						note->sustainLength = daSus;
HXLINE(2844)						note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(2845)						note->updateHitbox();
HXLINE(2846)						note->set_x(( (Float)(::Math_obj::floor(( (Float)((daNoteInfo * this->GRID_SIZE)) ))) ));
HXLINE(2848)						Float _hx_tmp = this->getYfromStrum(daStrumTime);
HXDLIN(2848)						note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(2850)						if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2851)							if (::hx::IsEq( this->curSelectedNote->__get(0),note->strumTime )) {
HXLINE(2852)								this->lastNote = note;
            							}
            						}
HXLINE(2854)						this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(2856)						Float stepCrochet = (((( (Float)(60) ) / seg->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2858)						if ((daSus > 0)) {
HXLINE(2860)							 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE(2861)							Float sustainVis1 = this->getYfromStrum((note->strumTime + note->sustainLength));
HXLINE(2860)							 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - note->y)),null(),null(),null());
HXLINE(2863)							note->noteCharterObject = sustainVis2;
HXLINE(2865)							this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            						}
            					}
            				}
HXLINE(2868)				currentSection = (currentSection + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGrid,(void))

void ChartingState_obj::addSection(::hx::Null< int >  __o_lengthInSteps){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2874_addSection)
HXLINE(2875)		Float daPos = ( (Float)(0) );
HXLINE(2876)		Float start = ( (Float)(0) );
HXLINE(2878)		Float bpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(2879)		{
HXLINE(2879)			int _g = 0;
HXDLIN(2879)			int _g1 = this->curSection;
HXDLIN(2879)			while((_g < _g1)){
HXLINE(2879)				_g = (_g + 1);
HXDLIN(2879)				int i = (_g - 1);
HXLINE(2881)				{
HXLINE(2881)					int _g1 = 0;
HXDLIN(2881)					::Array< ::Dynamic> _g2 = ::TimingStruct_obj::AllTimings;
HXDLIN(2881)					while((_g1 < _g2->length)){
HXLINE(2881)						 ::TimingStruct ii = _g2->__get(_g1).StaticCast<  ::TimingStruct >();
HXDLIN(2881)						_g1 = (_g1 + 1);
HXLINE(2883)						 ::TimingStruct data = ::TimingStruct_obj::getTimingAtTimestamp(start);
HXLINE(2884)						bool _hx_tmp;
HXDLIN(2884)						Float _hx_tmp1;
HXDLIN(2884)						if (::hx::IsNotNull( data )) {
HXLINE(2884)							_hx_tmp1 = data->bpm;
            						}
            						else {
HXLINE(2884)							_hx_tmp1 = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
HXDLIN(2884)						if ((_hx_tmp1 != bpm)) {
HXLINE(2884)							_hx_tmp = (bpm != ii->bpm);
            						}
            						else {
HXLINE(2884)							_hx_tmp = false;
            						}
HXDLIN(2884)						if (_hx_tmp) {
HXLINE(2885)							bpm = ii->bpm;
            						}
            					}
            				}
HXLINE(2887)				start = (start + ((( (Float)(4) ) * (( (Float)(60) ) / bpm)) * ( (Float)(1000) )));
            			}
            		}
HXLINE(2890)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("CPUAltAnim",b2,2f,f2,ef),false)
            			->setFixed(3,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(4,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(5,HX_("bpm",df,be,4a,00), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(6,HX_("startTime",8f,45,f0,05),daPos)
            			->setFixed(7,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(8,HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY)
            			->setFixed(9,HX_("playerAltAnim",79,ce,6b,5d),false)
            			->setFixed(10,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE(2904)		( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addSection,(void))

void ChartingState_obj::selectNote( ::Note note, ::Dynamic __o_deleteAllBoxes){
            		 ::Dynamic deleteAllBoxes = __o_deleteAllBoxes;
            		if (::hx::IsNull(__o_deleteAllBoxes)) deleteAllBoxes = true;
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2908_selectNote)
HXLINE(2909)		int swagNum = 0;
HXLINE(2912)		if (( (bool)(deleteAllBoxes) )) {
HXLINE(2913)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(2915)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(2916)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(2917)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
            		}
HXLINE(2920)		{
HXLINE(2920)			int _g = 0;
HXDLIN(2920)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2920)			while((_g < _g1->length)){
HXLINE(2920)				 ::Dynamic sec = _g1->__get(_g);
HXDLIN(2920)				_g = (_g + 1);
HXLINE(2922)				swagNum = 0;
HXLINE(2923)				{
HXLINE(2923)					int _g2 = 0;
HXDLIN(2923)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(sec->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2923)					while((_g2 < _g3->length)){
HXLINE(2923)						::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2923)						_g2 = (_g2 + 1);
HXLINE(2925)						bool _hx_tmp;
HXDLIN(2925)						if (::hx::IsEq( i->__get(0),note->strumTime )) {
HXLINE(2925)							_hx_tmp = ::hx::IsEq( i->__get(1),note->rawNoteData );
            						}
            						else {
HXLINE(2925)							_hx_tmp = false;
            						}
HXDLIN(2925)						if (_hx_tmp) {
HXLINE(2927)							this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic(sec->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(swagNum)) );
HXLINE(2928)							if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(2929)								this->curSelectedNoteObject->charterSelected = false;
            							}
HXLINE(2931)							this->curSelectedNoteObject = note;
HXLINE(2932)							if (!(note->charterSelected)) {
HXLINE(2934)								 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(2935)								box->connectedNoteData = i;
HXLINE(2936)								this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(2937)								note->charterSelected = true;
HXLINE(2938)								this->curSelectedNoteObject->charterSelected = true;
            							}
            						}
HXLINE(2943)						swagNum = (swagNum + 1);
            					}
            				}
            			}
            		}
HXLINE(2947)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,selectNote,(void))

void ChartingState_obj::deleteNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2952_deleteNote)
HXLINE(2953)		this->lastNote = note;
HXLINE(2955)		 ::Dynamic section = this->getSectionByTime(note->strumTime,null());
HXLINE(2957)		bool found = false;
HXLINE(2959)		{
HXLINE(2959)			int _g = 0;
HXDLIN(2959)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2959)			while((_g < _g1->length)){
HXLINE(2959)				::cpp::VirtualArray i = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(2959)				_g = (_g + 1);
HXLINE(2961)				bool _hx_tmp;
HXDLIN(2961)				if (::hx::IsEq( i->__get(0),note->strumTime )) {
HXLINE(2961)					_hx_tmp = ::hx::IsEq( i->__get(1),note->rawNoteData );
            				}
            				else {
HXLINE(2961)					_hx_tmp = false;
            				}
HXDLIN(2961)				if (_hx_tmp) {
HXLINE(2963)					( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
HXLINE(2964)					found = true;
            				}
            			}
            		}
HXLINE(2968)		if (!(found)) {
HXLINE(2970)			int _g = 0;
HXDLIN(2970)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2970)			while((_g < _g1->length)){
HXLINE(2970)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(2970)				_g = (_g + 1);
HXLINE(2972)				{
HXLINE(2972)					int _g2 = 0;
HXDLIN(2972)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2972)					while((_g2 < _g3->length)){
HXLINE(2972)						::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2972)						_g2 = (_g2 + 1);
HXLINE(2973)						bool _hx_tmp;
HXDLIN(2973)						if (::hx::IsEq( n->__get(0),note->strumTime )) {
HXLINE(2973)							_hx_tmp = ::hx::IsEq( n->__get(1),note->rawNoteData );
            						}
            						else {
HXLINE(2973)							_hx_tmp = false;
            						}
HXDLIN(2973)						if (_hx_tmp) {
HXLINE(2974)							( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(n);
            						}
            					}
            				}
            			}
            		}
HXLINE(2978)		this->curRenderedNotes->remove(note,null()).StaticCast<  ::Note >();
HXLINE(2980)		if ((note->sustainLength > 0)) {
HXLINE(2981)			this->curRenderedSustains->remove(note->noteCharterObject,null()).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(2983)		{
HXLINE(2983)			int _g2 = 0;
HXDLIN(2983)			int _g3 = this->selectedBoxes->members->get_length();
HXDLIN(2983)			while((_g2 < _g3)){
HXLINE(2983)				_g2 = (_g2 + 1);
HXDLIN(2983)				int i = (_g2 - 1);
HXLINE(2985)				 ::ChartingBox box = Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >();
HXLINE(2986)				if (::hx::IsEq( box->connectedNote,note )) {
HXLINE(2988)					this->selectedBoxes->members->remove(box);
HXLINE(2989)					box->destroy();
HXLINE(2990)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,deleteNote,(void))

void ChartingState_obj::clearSection(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2996_clearSection)
HXLINE(2997)		this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
HXLINE(2999)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSection,(void))

void ChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3003_clearSong)
HXLINE(3004)		{
HXLINE(3004)			int _g = 0;
HXDLIN(3004)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3004)			while((_g < _g1)){
HXLINE(3004)				_g = (_g + 1);
HXDLIN(3004)				int daSection = (_g - 1);
HXLINE(3006)				 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE(3009)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSong,(void))

 ::Dynamic ChartingState_obj::newSection(::hx::Null< int >  __o_lengthInSteps,::hx::Null< bool >  __o_mustHitSection,::hx::Null< bool >  __o_CPUAltAnim,::hx::Null< bool >  __o_playerAltAnim){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            		bool mustHitSection = __o_mustHitSection.Default(false);
            		bool CPUAltAnim = __o_CPUAltAnim.Default(true);
            		bool playerAltAnim = __o_playerAltAnim.Default(true);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3013_newSection)
HXLINE(3015)		Float daPos = ( (Float)(0) );
HXLINE(3017)		 ::TimingStruct currentSeg = ::TimingStruct_obj::AllTimings->__get((::TimingStruct_obj::AllTimings->length - 1)).StaticCast<  ::TimingStruct >();
HXLINE(3019)		int currentBeat = 4;
HXLINE(3021)		{
HXLINE(3021)			int _g = 0;
HXDLIN(3021)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3021)			while((_g < _g1->length)){
HXLINE(3021)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3021)				_g = (_g + 1);
HXLINE(3022)				currentBeat = (currentBeat + 4);
            			}
            		}
HXLINE(3024)		if (::hx::IsNull( currentSeg )) {
HXLINE(3025)			return null();
            		}
HXLINE(3027)		Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3029)		daPos = ((currentSeg->startTime + start) * ( (Float)(1000) ));
HXLINE(3031)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("CPUAltAnim",b2,2f,f2,ef),CPUAltAnim)
            			->setFixed(3,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(4,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(5,HX_("bpm",df,be,4a,00), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(6,HX_("startTime",8f,45,f0,05),daPos)
            			->setFixed(7,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(8,HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY)
            			->setFixed(9,HX_("playerAltAnim",79,ce,6b,5d),playerAltAnim)
            			->setFixed(10,HX_("mustHitSection",3b,5f,87,62),mustHitSection));
HXLINE(3046)		return sec;
            	}


HX_DEFINE_DYNAMIC_FUNC4(ChartingState_obj,newSection,return )

void ChartingState_obj::recalculateAllSectionTimes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3056_recalculateAllSectionTimes)
HXDLIN(3056)		int _g = 0;
HXDLIN(3056)		int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3056)		while((_g < _g1)){
HXDLIN(3056)			_g = (_g + 1);
HXDLIN(3056)			int i = (_g - 1);
HXLINE(3058)			 ::Dynamic section =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE(3060)			int currentBeat = (4 * i);
HXLINE(3062)			 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE(3064)			if (::hx::IsNull( currentSeg )) {
HXLINE(3065)				return;
            			}
HXLINE(3067)			Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3069)			section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE(3071)			if ((i != 0)) {
HXLINE(3072)				 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(3073)			section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,recalculateAllSectionTimes,(void))

void ChartingState_obj::shiftNotes(::hx::Null< int >  __o_measure,::hx::Null< int >  __o_step,::hx::Null< int >  __o_ms){
            		int measure = __o_measure.Default(0);
            		int step = __o_step.Default(0);
            		int ms = __o_ms.Default(0);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3080_shiftNotes)
HXLINE(3081)		::Array< ::Dynamic> newSong = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3083)		Float millisecadd = ((((measure * 4) + (( (Float)(step) ) / ( (Float)(4) ))) * (( (Float)(60000) ) / this->currentBPM)) + ms);
HXLINE(3084)		int totaladdsection = ::Std_obj::_hx_int(((millisecadd / (( (Float)(60000) ) / this->currentBPM)) / ( (Float)(4) )));
HXLINE(3086)		if ((millisecadd > 0)) {
HXLINE(3088)			int _g = 0;
HXDLIN(3088)			int _g1 = totaladdsection;
HXDLIN(3088)			while((_g < _g1)){
HXLINE(3088)				_g = (_g + 1);
HXDLIN(3088)				int i = (_g - 1);
HXLINE(3090)				newSong->unshift(this->newSection(null(),null(),null(),null()));
            			}
            		}
HXLINE(3093)		{
HXLINE(3093)			int _g = 0;
HXDLIN(3093)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3093)			while((_g < _g1)){
HXLINE(3093)				_g = (_g + 1);
HXDLIN(3093)				int daSection1 = (_g - 1);
HXLINE(3095)				newSong->push(this->newSection(16, ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)));
            			}
            		}
HXLINE(3098)		{
HXLINE(3098)			int _g2 = 0;
HXDLIN(3098)			int _g3 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3098)			while((_g2 < _g3)){
HXLINE(3098)				_g2 = (_g2 + 1);
HXDLIN(3098)				int daSection = (_g2 - 1);
HXLINE(3100)				int aimtosetsection = (daSection + ::Std_obj::_hx_int(( (Float)(totaladdsection) )));
HXLINE(3101)				if ((aimtosetsection < 0)) {
HXLINE(3101)					aimtosetsection = 0;
            				}
HXLINE(3102)				newSong->__get(aimtosetsection)->__SetField(HX_("mustHitSection",3b,5f,87,62), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3103)				newSong->__get(aimtosetsection)->__SetField(HX_("CPUAltAnim",b2,2f,f2,ef), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3104)				newSong->__get(aimtosetsection)->__SetField(HX_("playerAltAnim",79,ce,6b,5d), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3106)				{
HXLINE(3106)					int _g = 0;
HXDLIN(3106)					int _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(3106)					while((_g < _g1)){
HXLINE(3106)						_g = (_g + 1);
HXDLIN(3106)						int daNote = (_g - 1);
HXLINE(3108)						int newtiming = ( (int)(( ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote)->__GetItem(0) + millisecadd)) );
HXLINE(3109)						if ((newtiming < 0)) {
HXLINE(3111)							newtiming = 0;
            						}
HXLINE(3113)						int futureSection = ::Math_obj::floor(((( (Float)(newtiming) ) / ( (Float)(4) )) / (( (Float)(60000) ) / this->currentBPM)));
HXLINE(3114)						 ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote)->__SetItem(0,newtiming);
HXLINE(3115)						( (::Array< ::Dynamic>)(newSong->__get(futureSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push( ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote));
            					}
            				}
            			}
            		}
HXLINE(3122)		::ChartingState_obj::_song->__SetField(HX_("notes",41,dc,ca,9f),newSong,::hx::paccDynamic);
HXLINE(3123)		this->recalculateAllSectionTimes();
HXLINE(3124)		this->updateGrid();
HXLINE(3125)		this->updateSectionUI();
HXLINE(3126)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,shiftNotes,(void))

 ::Dynamic ChartingState_obj::getSectionByTime(Float ms, ::Dynamic __o_changeCurSectionIndex){
            		 ::Dynamic changeCurSectionIndex = __o_changeCurSectionIndex;
            		if (::hx::IsNull(__o_changeCurSectionIndex)) changeCurSectionIndex = false;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3130_getSectionByTime)
HXLINE(3131)		int index = 0;
HXLINE(3135)		{
HXLINE(3135)			int _g = 0;
HXDLIN(3135)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3135)			while((_g < _g1->length)){
HXLINE(3135)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3135)				_g = (_g + 1);
HXLINE(3137)				bool _hx_tmp;
HXDLIN(3137)				if (::hx::IsGreaterEq( ms,i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(3137)					_hx_tmp = ::hx::IsLess( ms,i->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            				}
            				else {
HXLINE(3137)					_hx_tmp = false;
            				}
HXDLIN(3137)				if (_hx_tmp) {
HXLINE(3139)					if (( (bool)(changeCurSectionIndex) )) {
HXLINE(3140)						this->curSection = index;
            					}
HXLINE(3141)					return i;
            				}
HXLINE(3143)				index = (index + 1);
            			}
            		}
HXLINE(3147)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getSectionByTime,return )

 ::Dynamic ChartingState_obj::getNoteByTime(Float ms){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3151_getNoteByTime)
HXLINE(3152)		{
HXLINE(3152)			int _g = 0;
HXDLIN(3152)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3152)			while((_g < _g1->length)){
HXLINE(3152)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3152)				_g = (_g + 1);
HXLINE(3154)				{
HXLINE(3154)					int _g2 = 0;
HXDLIN(3154)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3154)					while((_g2 < _g3->length)){
HXLINE(3154)						::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(3154)						_g2 = (_g2 + 1);
HXLINE(3155)						if (::hx::IsEq( n->__get(0),ms )) {
HXLINE(3156)							return i;
            						}
            					}
            				}
            			}
            		}
HXLINE(3158)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getNoteByTime,return )

void ChartingState_obj::addNote( ::Note n){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3164_addNote)
HXLINE(3165)		Float strum = this->getStrumTime(this->dummyArrow->y);
HXDLIN(3165)		Float strum1 = (strum / this->zoomFactor);
HXLINE(3171)		 ::Dynamic section = this->getSectionByTime(strum1,null());
HXLINE(3173)		if (::hx::IsNull( section )) {
HXLINE(3174)			return;
            		}
HXLINE(3176)		Float noteStrum = strum1;
HXLINE(3177)		int noteData = ::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) )));
HXLINE(3178)		int noteSus = 0;
HXLINE(3180)		if (::hx::IsNotNull( n )) {
HXLINE(3181)			::Array< ::Dynamic> section1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3181)			Float n1 = n->strumTime;
HXDLIN(3181)			int n2 = n->noteData;
HXDLIN(3181)			Float n3 = n->sustainLength;
HXDLIN(3181)			section1->push(::cpp::VirtualArray_obj::__new(5)->init(0,n1)->init(1,n2)->init(2,n3)->init(3,false)->init(4,::TimingStruct_obj::getBeatFromTime(n->strumTime)));
            		}
            		else {
HXLINE(3183)			::Array< ::Dynamic> section1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3183)			section1->push(::cpp::VirtualArray_obj::__new(5)->init(0,noteStrum)->init(1,noteData)->init(2,noteSus)->init(3,false)->init(4,::TimingStruct_obj::getBeatFromTime(noteStrum)));
            		}
HXLINE(3185)		::cpp::VirtualArray thingy = ( (::cpp::VirtualArray)( ::Dynamic(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length - 1))) );
HXLINE(3187)		this->curSelectedNote = thingy;
HXLINE(3189)		 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtTimestamp(noteStrum);
HXLINE(3191)		if (::hx::IsNull( n )) {
HXLINE(3193)			 ::Note note =  ::Note_obj::__alloc( HX_CTX ,noteStrum,::hx::Mod(noteData,4),null(),false,true,null(),::TimingStruct_obj::getBeatFromTime(noteStrum));
HXLINE(3194)			note->rawNoteData = noteData;
HXLINE(3195)			note->sustainLength = ( (Float)(noteSus) );
HXLINE(3196)			note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(3197)			note->updateHitbox();
HXLINE(3198)			note->set_x(( (Float)(::Math_obj::floor(( (Float)((noteData * this->GRID_SIZE)) ))) ));
HXLINE(3200)			if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(3201)				this->curSelectedNoteObject->charterSelected = false;
            			}
HXLINE(3202)			this->curSelectedNoteObject = note;
HXLINE(3204)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(3206)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(3207)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(3208)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
HXLINE(3211)			this->curSelectedNoteObject->charterSelected = true;
HXLINE(3213)			Float _hx_tmp = this->getYfromStrum(noteStrum);
HXDLIN(3213)			note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(3215)			 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(3216)			box->connectedNoteData = thingy;
HXLINE(3217)			this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(3219)			this->curRenderedNotes->add(note).StaticCast<  ::Note >();
            		}
            		else {
HXLINE(3223)			Float n1 = n->strumTime;
HXDLIN(3223)			int note = ::hx::Mod(n->noteData,4);
HXDLIN(3223)			bool n2 = n->isAlt;
HXDLIN(3223)			 ::Note note1 =  ::Note_obj::__alloc( HX_CTX ,n1,note,null(),false,true,n2,::TimingStruct_obj::getBeatFromTime(n->strumTime));
HXLINE(3224)			note1->beat = ::TimingStruct_obj::getBeatFromTime(n->strumTime);
HXLINE(3225)			note1->rawNoteData = n->noteData;
HXLINE(3226)			note1->sustainLength = ( (Float)(noteSus) );
HXLINE(3227)			note1->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(3228)			note1->updateHitbox();
HXLINE(3229)			note1->set_x(( (Float)(::Math_obj::floor(( (Float)((n->noteData * this->GRID_SIZE)) ))) ));
HXLINE(3231)			if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(3232)				this->curSelectedNoteObject->charterSelected = false;
            			}
HXLINE(3233)			this->curSelectedNoteObject = note1;
HXLINE(3235)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(3237)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(3238)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(3239)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
HXLINE(3242)			 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note1->x,note1->y,note1);
HXLINE(3243)			box->connectedNoteData = thingy;
HXLINE(3244)			this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(3246)			this->curSelectedNoteObject->charterSelected = true;
HXLINE(3248)			Float _hx_tmp = this->getYfromStrum(n->strumTime);
HXDLIN(3248)			note1->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(3250)			this->curRenderedNotes->add(note1).StaticCast<  ::Note >();
            		}
HXLINE(3253)		this->updateNoteUI();
HXLINE(3255)		this->autosaveSong();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addNote,(void))

Float ChartingState_obj::getStrumTime(Float yPos){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3260_getStrumTime)
HXDLIN(3260)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,( (Float)(0) ),::ChartingState_obj::lengthInSteps,( (Float)(0) ),::ChartingState_obj::lengthInSteps);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3265_getYfromStrum)
HXDLIN(3265)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),::ChartingState_obj::lengthInSteps,( (Float)(0) ),::ChartingState_obj::lengthInSteps);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getYfromStrum,return )

void ChartingState_obj::loadLevel(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3295_loadLevel)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadLevel,(void))

::cpp::VirtualArray ChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3299_getNotes)
HXLINE(3300)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(3302)		{
HXLINE(3302)			int _g = 0;
HXDLIN(3302)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3302)			while((_g < _g1->length)){
HXLINE(3302)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3302)				_g = (_g + 1);
HXLINE(3304)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(3307)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getNotes,return )

void ChartingState_obj::loadJson(::String song){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3311_loadJson)
HXLINE(3312)		::Array< ::String > difficultyArray = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_173,3);
HXLINE(3313)		::String format = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(3314)		::String _hx_switch_0 = format;
            		if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(3315)			format = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(3315)			goto _hx_goto_171;
            		}
            		if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(3316)			format = HX_("Philly",48,eb,f2,23);
HXDLIN(3316)			goto _hx_goto_171;
            		}
            		_hx_goto_171:;
HXLINE(3318)		::PlayState_obj::SONG = ::Song_obj::loadFromJson((format + difficultyArray->__get(::PlayState_obj::storyDifficulty)),format);
HXLINE(3319)		{
HXLINE(3319)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3319)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3319)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadJson,(void))

void ChartingState_obj::loadAutosave(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3323_loadAutosave)
HXLINE(3324)		::PlayState_obj::SONG = ::Song_obj::parseJSONshit(( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ));
HXLINE(3325)		{
HXLINE(3325)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3325)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3325)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadAutosave,(void))

void ChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3329_autosaveSong)
HXLINE(3330)		 ::Dynamic replacer = null();
HXDLIN(3330)		::String space = null();
HXDLIN(3330)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),::ChartingState_obj::_song)),replacer,space);
HXDLIN(3330)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(3333)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,autosaveSong,(void))

void ChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3337_saveLevel)
HXLINE(3338)		::Array< ::String > difficultyArray = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_177,3);
HXLINE(3339)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),::ChartingState_obj::_song));
HXLINE(3343)		 ::Dynamic replacer = null();
HXDLIN(3343)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_(" ",20,00,00,00));
HXLINE(3345)		bool _hx_tmp;
HXDLIN(3345)		if (::hx::IsNotNull( data )) {
HXLINE(3345)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(3345)			_hx_tmp = false;
            		}
HXDLIN(3345)		if (_hx_tmp) {
HXLINE(3347)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(3348)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(3349)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(3350)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(3351)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(3351)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(3351)			::String _hx_tmp2 = ( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN(3351)			_hx_tmp->save(_hx_tmp1,((_hx_tmp2 + difficultyArray->__get(::PlayState_obj::storyDifficulty)) + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveLevel,(void))

void ChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3356_onSaveComplete)
HXLINE(3357)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3358)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3359)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3360)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveComplete,(void))

void ChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3368_onSaveCancel)
HXLINE(3369)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3370)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3371)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3372)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveCancel,(void))

void ChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3379_onSaveError)
HXLINE(3380)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3381)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3382)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3383)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveError,(void))

 ::ChartingState ChartingState_obj::instance;

Float ChartingState_obj::lengthInSteps;

Float ChartingState_obj::lengthInBeats;

int ChartingState_obj::lastSection;

 ::Dynamic ChartingState_obj::_song;

 ::HealthIcon ChartingState_obj::leftIcon;

 ::HealthIcon ChartingState_obj::rightIcon;

::String ChartingState_obj::latestChartVersion;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(playClaps,"playClaps");
	HX_MARK_MEMBER_NAME(snap,"snap");
	HX_MARK_MEMBER_NAME(deezNuts,"deezNuts");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(UI_options,"UI_options");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(beatsShown,"beatsShown");
	HX_MARK_MEMBER_NAME(zoomFactor,"zoomFactor");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(writingNotesText,"writingNotesText");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_MARK_MEMBER_NAME(subDivisions,"subDivisions");
	HX_MARK_MEMBER_NAME(defaultSnap,"defaultSnap");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(sectionRenderes,"sectionRenderes");
	HX_MARK_MEMBER_NAME(typingShit,"typingShit");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(tempBpm,"tempBpm");
	HX_MARK_MEMBER_NAME(gridBlackLine,"gridBlackLine");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(player2,"player2");
	HX_MARK_MEMBER_NAME(player1,"player1");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(lastNote,"lastNote");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(claps,"claps");
	HX_MARK_MEMBER_NAME(snapText,"snapText");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(texts,"texts");
	HX_MARK_MEMBER_NAME(stepperDiv,"stepperDiv");
	HX_MARK_MEMBER_NAME(check_snap,"check_snap");
	HX_MARK_MEMBER_NAME(listOfEvents,"listOfEvents");
	HX_MARK_MEMBER_NAME(currentSelectedEventName,"currentSelectedEventName");
	HX_MARK_MEMBER_NAME(savedType,"savedType");
	HX_MARK_MEMBER_NAME(savedValue,"savedValue");
	HX_MARK_MEMBER_NAME(currentEventPosition,"currentEventPosition");
	HX_MARK_MEMBER_NAME(chartEvents,"chartEvents");
	HX_MARK_MEMBER_NAME(Typeables,"Typeables");
	HX_MARK_MEMBER_NAME(stepperLength,"stepperLength");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_CPUAltAnim,"check_CPUAltAnim");
	HX_MARK_MEMBER_NAME(check_playerAltAnim,"check_playerAltAnim");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(tab_group_note,"tab_group_note");
	HX_MARK_MEMBER_NAME(check_naltAnim,"check_naltAnim");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(writingNotes,"writingNotes");
	HX_MARK_MEMBER_NAME(doSnapShit,"doSnapShit");
	HX_MARK_MEMBER_NAME(diff,"diff");
	HX_MARK_MEMBER_NAME(changeIndex,"changeIndex");
	HX_MARK_MEMBER_NAME(currentBPM,"currentBPM");
	HX_MARK_MEMBER_NAME(lastBPM,"lastBPM");
	HX_MARK_MEMBER_NAME(updateFrame,"updateFrame");
	HX_MARK_MEMBER_NAME(lastUpdatedSection,"lastUpdatedSection");
	HX_MARK_MEMBER_NAME(shownNotes,"shownNotes");
	HX_MARK_MEMBER_NAME(snapSelection,"snapSelection");
	HX_MARK_MEMBER_NAME(selectedBoxes,"selectedBoxes");
	HX_MARK_MEMBER_NAME(waitingForRelease,"waitingForRelease");
	HX_MARK_MEMBER_NAME(selectBox,"selectBox");
	HX_MARK_MEMBER_NAME(copiedNotes,"copiedNotes");
	HX_MARK_MEMBER_NAME(pastedNotes,"pastedNotes");
	HX_MARK_MEMBER_NAME(deletedNotes,"deletedNotes");
	HX_MARK_MEMBER_NAME(selectInitialX,"selectInitialX");
	HX_MARK_MEMBER_NAME(selectInitialY,"selectInitialY");
	HX_MARK_MEMBER_NAME(lastAction,"lastAction");
	HX_MARK_MEMBER_NAME(curSelectedNoteObject,"curSelectedNoteObject");
	HX_MARK_MEMBER_NAME(daSpacing,"daSpacing");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(playClaps,"playClaps");
	HX_VISIT_MEMBER_NAME(snap,"snap");
	HX_VISIT_MEMBER_NAME(deezNuts,"deezNuts");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(UI_options,"UI_options");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(beatsShown,"beatsShown");
	HX_VISIT_MEMBER_NAME(zoomFactor,"zoomFactor");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(writingNotesText,"writingNotesText");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_VISIT_MEMBER_NAME(subDivisions,"subDivisions");
	HX_VISIT_MEMBER_NAME(defaultSnap,"defaultSnap");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(sectionRenderes,"sectionRenderes");
	HX_VISIT_MEMBER_NAME(typingShit,"typingShit");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(tempBpm,"tempBpm");
	HX_VISIT_MEMBER_NAME(gridBlackLine,"gridBlackLine");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(player2,"player2");
	HX_VISIT_MEMBER_NAME(player1,"player1");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(lastNote,"lastNote");
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(claps,"claps");
	HX_VISIT_MEMBER_NAME(snapText,"snapText");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(texts,"texts");
	HX_VISIT_MEMBER_NAME(stepperDiv,"stepperDiv");
	HX_VISIT_MEMBER_NAME(check_snap,"check_snap");
	HX_VISIT_MEMBER_NAME(listOfEvents,"listOfEvents");
	HX_VISIT_MEMBER_NAME(currentSelectedEventName,"currentSelectedEventName");
	HX_VISIT_MEMBER_NAME(savedType,"savedType");
	HX_VISIT_MEMBER_NAME(savedValue,"savedValue");
	HX_VISIT_MEMBER_NAME(currentEventPosition,"currentEventPosition");
	HX_VISIT_MEMBER_NAME(chartEvents,"chartEvents");
	HX_VISIT_MEMBER_NAME(Typeables,"Typeables");
	HX_VISIT_MEMBER_NAME(stepperLength,"stepperLength");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_CPUAltAnim,"check_CPUAltAnim");
	HX_VISIT_MEMBER_NAME(check_playerAltAnim,"check_playerAltAnim");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(tab_group_note,"tab_group_note");
	HX_VISIT_MEMBER_NAME(check_naltAnim,"check_naltAnim");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(writingNotes,"writingNotes");
	HX_VISIT_MEMBER_NAME(doSnapShit,"doSnapShit");
	HX_VISIT_MEMBER_NAME(diff,"diff");
	HX_VISIT_MEMBER_NAME(changeIndex,"changeIndex");
	HX_VISIT_MEMBER_NAME(currentBPM,"currentBPM");
	HX_VISIT_MEMBER_NAME(lastBPM,"lastBPM");
	HX_VISIT_MEMBER_NAME(updateFrame,"updateFrame");
	HX_VISIT_MEMBER_NAME(lastUpdatedSection,"lastUpdatedSection");
	HX_VISIT_MEMBER_NAME(shownNotes,"shownNotes");
	HX_VISIT_MEMBER_NAME(snapSelection,"snapSelection");
	HX_VISIT_MEMBER_NAME(selectedBoxes,"selectedBoxes");
	HX_VISIT_MEMBER_NAME(waitingForRelease,"waitingForRelease");
	HX_VISIT_MEMBER_NAME(selectBox,"selectBox");
	HX_VISIT_MEMBER_NAME(copiedNotes,"copiedNotes");
	HX_VISIT_MEMBER_NAME(pastedNotes,"pastedNotes");
	HX_VISIT_MEMBER_NAME(deletedNotes,"deletedNotes");
	HX_VISIT_MEMBER_NAME(selectInitialX,"selectInitialX");
	HX_VISIT_MEMBER_NAME(selectInitialY,"selectInitialY");
	HX_VISIT_MEMBER_NAME(lastAction,"lastAction");
	HX_VISIT_MEMBER_NAME(curSelectedNoteObject,"curSelectedNoteObject");
	HX_VISIT_MEMBER_NAME(daSpacing,"daSpacing");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"snap") ) { return ::hx::Val( snap ); }
		if (HX_FIELD_EQ(inName,"diff") ) { return ::hx::Val( diff ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"lines") ) { return ::hx::Val( lines ); }
		if (HX_FIELD_EQ(inName,"claps") ) { return ::hx::Val( claps ); }
		if (HX_FIELD_EQ(inName,"texts") ) { return ::hx::Val( texts ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { return ::hx::Val( tempBpm ); }
		if (HX_FIELD_EQ(inName,"player2") ) { return ::hx::Val( player2 ); }
		if (HX_FIELD_EQ(inName,"player1") ) { return ::hx::Val( player1 ); }
		if (HX_FIELD_EQ(inName,"addGrid") ) { return ::hx::Val( addGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"poggers") ) { return ::hx::Val( poggers_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastBPM") ) { return ::hx::Val( lastBPM ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deezNuts") ) { return ::hx::Val( deezNuts ); }
		if (HX_FIELD_EQ(inName,"lastNote") ) { return ::hx::Val( lastNote ); }
		if (HX_FIELD_EQ(inName,"snapText") ) { return ::hx::Val( snapText ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playClaps") ) { return ::hx::Val( playClaps ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { return ::hx::Val( GRID_SIZE ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"savedType") ) { return ::hx::Val( savedType ); }
		if (HX_FIELD_EQ(inName,"Typeables") ) { return ::hx::Val( Typeables ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectBox") ) { return ::hx::Val( selectBox ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { return ::hx::Val( daSpacing ); }
		if (HX_FIELD_EQ(inName,"loadLevel") ) { return ::hx::Val( loadLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_options") ) { return ::hx::Val( UI_options ); }
		if (HX_FIELD_EQ(inName,"beatsShown") ) { return ::hx::Val( beatsShown ); }
		if (HX_FIELD_EQ(inName,"zoomFactor") ) { return ::hx::Val( zoomFactor ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"typingShit") ) { return ::hx::Val( typingShit ); }
		if (HX_FIELD_EQ(inName,"stepperDiv") ) { return ::hx::Val( stepperDiv ); }
		if (HX_FIELD_EQ(inName,"check_snap") ) { return ::hx::Val( check_snap ); }
		if (HX_FIELD_EQ(inName,"savedValue") ) { return ::hx::Val( savedValue ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"doSnapShit") ) { return ::hx::Val( doSnapShit ); }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { return ::hx::Val( currentBPM ); }
		if (HX_FIELD_EQ(inName,"shownNotes") ) { return ::hx::Val( shownNotes ); }
		if (HX_FIELD_EQ(inName,"lastAction") ) { return ::hx::Val( lastAction ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"newSection") ) { return ::hx::Val( newSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"shiftNotes") ) { return ::hx::Val( shiftNotes_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"defaultSnap") ) { return ::hx::Val( defaultSnap ); }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { return ::hx::Val( chartEvents ); }
		if (HX_FIELD_EQ(inName,"addEventsUI") ) { return ::hx::Val( addEventsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"goToSection") ) { return ::hx::Val( goToSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeIndex") ) { return ::hx::Val( changeIndex ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return ::hx::Val( updateFrame ); }
		if (HX_FIELD_EQ(inName,"copiedNotes") ) { return ::hx::Val( copiedNotes ); }
		if (HX_FIELD_EQ(inName,"pastedNotes") ) { return ::hx::Val( pastedNotes ); }
		if (HX_FIELD_EQ(inName,"copySection") ) { return ::hx::Val( copySection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subDivisions") ) { return ::hx::Val( subDivisions ); }
		if (HX_FIELD_EQ(inName,"listOfEvents") ) { return ::hx::Val( listOfEvents ); }
		if (HX_FIELD_EQ(inName,"containsName") ) { return ::hx::Val( containsName_dyn() ); }
		if (HX_FIELD_EQ(inName,"addOptionsUI") ) { return ::hx::Val( addOptionsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"writingNotes") ) { return ::hx::Val( writingNotes ); }
		if (HX_FIELD_EQ(inName,"deletedNotes") ) { return ::hx::Val( deletedNotes ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSection") ) { return ::hx::Val( clearSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadAutosave") ) { return ::hx::Val( loadAutosave_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gridBlackLine") ) { return ::hx::Val( gridBlackLine ); }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { return ::hx::Val( stepperLength ); }
		if (HX_FIELD_EQ(inName,"stepStartTime") ) { return ::hx::Val( stepStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"snapSelection") ) { return ::hx::Val( snapSelection ); }
		if (HX_FIELD_EQ(inName,"selectedBoxes") ) { return ::hx::Val( selectedBoxes ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNoteByTime") ) { return ::hx::Val( getNoteByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tab_group_note") ) { return ::hx::Val( tab_group_note ); }
		if (HX_FIELD_EQ(inName,"check_naltAnim") ) { return ::hx::Val( check_naltAnim ); }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"selectInitialX") ) { return ::hx::Val( selectInitialX ); }
		if (HX_FIELD_EQ(inName,"selectInitialY") ) { return ::hx::Val( selectInitialY ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sectionRenderes") ) { return ::hx::Val( sectionRenderes ); }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"regenerateLines") ) { return ::hx::Val( regenerateLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"writingNotesText") ) { return ::hx::Val( writingNotesText ); }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"check_CPUAltAnim") ) { return ::hx::Val( check_CPUAltAnim ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"resizeEverything") ) { return ::hx::Val( resizeEverything_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSectionByTime") ) { return ::hx::Val( getSectionByTime_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"waitingForRelease") ) { return ::hx::Val( waitingForRelease ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUpdatedSection") ) { return ::hx::Val( lastUpdatedSection ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		if (HX_FIELD_EQ(inName,"check_playerAltAnim") ) { return ::hx::Val( check_playerAltAnim ); }
		if (HX_FIELD_EQ(inName,"pasteNotesFromArray") ) { return ::hx::Val( pasteNotesFromArray_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentEventPosition") ) { return ::hx::Val( currentEventPosition ); }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"curSelectedNoteObject") ) { return ::hx::Val( curSelectedNoteObject ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"currentSelectedEventName") ) { return ::hx::Val( currentSelectedEventName ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"recalculateAllSectionTimes") ) { return ::hx::Val( recalculateAllSectionTimes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { outValue = ( _song ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { outValue = ( leftIcon ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightIcon") ) { outValue = ( rightIcon ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthInSteps") ) { outValue = ( lengthInSteps ); return true; }
		if (HX_FIELD_EQ(inName,"lengthInBeats") ) { outValue = ( lengthInBeats ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"latestChartVersion") ) { outValue = ( latestChartVersion ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"snap") ) { snap=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diff") ) { diff=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"claps") ) { claps=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texts") ) { texts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { tempBpm=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player2") ) { player2=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player1") ) { player1=inValue.Cast<  ::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBPM") ) { lastBPM=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deezNuts") ) { deezNuts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastNote") ) { lastNote=inValue.Cast<  ::Note >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snapText") ) { snapText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playClaps") ) { playClaps=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedType") ) { savedType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Typeables") ) { Typeables=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectBox") ) { selectBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { daSpacing=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_options") ) { UI_options=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatsShown") ) { beatsShown=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomFactor") ) { zoomFactor=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typingShit") ) { typingShit=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperDiv") ) { stepperDiv=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_snap") ) { check_snap=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedValue") ) { savedValue=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doSnapShit") ) { doSnapShit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { currentBPM=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shownNotes") ) { shownNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastAction") ) { lastAction=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultSnap") ) { defaultSnap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { chartEvents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changeIndex") ) { changeIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { updateFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copiedNotes") ) { copiedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pastedNotes") ) { pastedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subDivisions") ) { subDivisions=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listOfEvents") ) { listOfEvents=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"writingNotes") ) { writingNotes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deletedNotes") ) { deletedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gridBlackLine") ) { gridBlackLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { stepperLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snapSelection") ) { snapSelection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedBoxes") ) { selectedBoxes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tab_group_note") ) { tab_group_note=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_naltAnim") ) { check_naltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectInitialX") ) { selectInitialX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectInitialY") ) { selectInitialY=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sectionRenderes") ) { sectionRenderes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"writingNotesText") ) { writingNotesText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_CPUAltAnim") ) { check_CPUAltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waitingForRelease") ) { waitingForRelease=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUpdatedSection") ) { lastUpdatedSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_playerAltAnim") ) { check_playerAltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentEventPosition") ) { currentEventPosition=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"curSelectedNoteObject") ) { curSelectedNoteObject=inValue.Cast<  ::Note >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"currentSelectedEventName") ) { currentSelectedEventName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { _song=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::ChartingState >(); return true; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=ioValue.Cast<  ::HealthIcon >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=ioValue.Cast<  ::HealthIcon >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthInSteps") ) { lengthInSteps=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"lengthInBeats") ) { lengthInBeats=ioValue.Cast< Float >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"latestChartVersion") ) { latestChartVersion=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("playClaps",07,a3,3c,69));
	outFields->push(HX_("snap",4a,56,57,4c));
	outFields->push(HX_("deezNuts",dc,76,82,94));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("UI_options",33,4b,47,19));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("beatsShown",54,d5,f6,63));
	outFields->push(HX_("zoomFactor",42,c0,4e,b4));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("writingNotesText",12,02,e7,d3));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("GRID_SIZE",1a,98,25,c9));
	outFields->push(HX_("subDivisions",06,31,26,2c));
	outFields->push(HX_("defaultSnap",ab,4f,16,1e));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("sectionRenderes",49,74,65,eb));
	outFields->push(HX_("typingShit",d7,01,ec,6a));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("tempBpm",2b,d8,ac,46));
	outFields->push(HX_("gridBlackLine",ad,65,ea,f8));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("player2",b1,09,15,8a));
	outFields->push(HX_("player1",b0,09,15,8a));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("lastNote",68,31,53,dc));
	outFields->push(HX_("lines",ff,dd,01,75));
	outFields->push(HX_("claps",9b,75,58,48));
	outFields->push(HX_("snapText",17,3c,34,0d));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("texts",26,4b,99,0d));
	outFields->push(HX_("stepperDiv",c0,b0,21,f4));
	outFields->push(HX_("check_snap",61,04,2b,7c));
	outFields->push(HX_("listOfEvents",0e,f6,f0,91));
	outFields->push(HX_("currentSelectedEventName",31,61,08,a9));
	outFields->push(HX_("savedType",e1,b8,73,c7));
	outFields->push(HX_("savedValue",6a,1b,bb,d4));
	outFields->push(HX_("currentEventPosition",ea,92,90,06));
	outFields->push(HX_("chartEvents",97,5a,ec,fc));
	outFields->push(HX_("Typeables",7f,44,75,ee));
	outFields->push(HX_("stepperLength",d7,b0,3a,4b));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_CPUAltAnim",09,09,2a,93));
	outFields->push(HX_("check_playerAltAnim",82,25,63,ff));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("tab_group_note",1c,75,04,82));
	outFields->push(HX_("check_naltAnim",c3,02,1a,86));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("writingNotes",c5,c2,9a,1c));
	outFields->push(HX_("doSnapShit",d5,55,02,7a));
	outFields->push(HX_("diff",05,5c,69,42));
	outFields->push(HX_("changeIndex",82,43,da,e3));
	outFields->push(HX_("currentBPM",26,68,25,c7));
	outFields->push(HX_("lastBPM",29,ea,9f,d7));
	outFields->push(HX_("updateFrame",64,e1,1b,ec));
	outFields->push(HX_("lastUpdatedSection",e0,c1,dd,e5));
	outFields->push(HX_("shownNotes",b0,2d,1a,63));
	outFields->push(HX_("snapSelection",a2,68,82,ba));
	outFields->push(HX_("selectedBoxes",de,ca,40,ad));
	outFields->push(HX_("waitingForRelease",ab,09,c5,09));
	outFields->push(HX_("selectBox",6f,60,fd,8d));
	outFields->push(HX_("copiedNotes",5d,6e,3c,8c));
	outFields->push(HX_("pastedNotes",d0,74,74,81));
	outFields->push(HX_("deletedNotes",a8,13,ac,60));
	outFields->push(HX_("selectInitialX",70,96,c1,b8));
	outFields->push(HX_("selectInitialY",71,96,c1,b8));
	outFields->push(HX_("lastAction",ac,1e,21,e1));
	outFields->push(HX_("curSelectedNoteObject",2c,64,f7,86));
	outFields->push(HX_("daSpacing",86,9d,76,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(ChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,playClaps),HX_("playClaps",07,a3,3c,69)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,snap),HX_("snap",4a,56,57,4c)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(ChartingState_obj,deezNuts),HX_("deezNuts",dc,76,82,94)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_options),HX_("UI_options",33,4b,47,19)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,beatsShown),HX_("beatsShown",54,d5,f6,63)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,zoomFactor),HX_("zoomFactor",42,c0,4e,b4)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,writingNotesText),HX_("writingNotesText",12,02,e7,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,GRID_SIZE),HX_("GRID_SIZE",1a,98,25,c9)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,subDivisions),HX_("subDivisions",06,31,26,2c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,defaultSnap),HX_("defaultSnap",ab,4f,16,1e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,sectionRenderes),HX_("sectionRenderes",49,74,65,eb)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(ChartingState_obj,typingShit),HX_("typingShit",d7,01,ec,6a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,tempBpm),HX_("tempBpm",2b,d8,ac,46)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBlackLine),HX_("gridBlackLine",ad,65,ea,f8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(ChartingState_obj,player2),HX_("player2",b1,09,15,8a)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(ChartingState_obj,player1),HX_("player1",b0,09,15,8a)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(ChartingState_obj,lastNote),HX_("lastNote",68,31,53,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,lines),HX_("lines",ff,dd,01,75)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,claps),HX_("claps",9b,75,58,48)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,snapText),HX_("snapText",17,3c,34,0d)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(ChartingState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,texts),HX_("texts",26,4b,99,0d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperDiv),HX_("stepperDiv",c0,b0,21,f4)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_snap),HX_("check_snap",61,04,2b,7c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,listOfEvents),HX_("listOfEvents",0e,f6,f0,91)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,currentSelectedEventName),HX_("currentSelectedEventName",31,61,08,a9)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,savedType),HX_("savedType",e1,b8,73,c7)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,savedValue),HX_("savedValue",6a,1b,bb,d4)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,currentEventPosition),HX_("currentEventPosition",ea,92,90,06)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,chartEvents),HX_("chartEvents",97,5a,ec,fc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,Typeables),HX_("Typeables",7f,44,75,ee)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperLength),HX_("stepperLength",d7,b0,3a,4b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_CPUAltAnim),HX_("check_CPUAltAnim",09,09,2a,93)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_playerAltAnim),HX_("check_playerAltAnim",82,25,63,ff)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUI */ ,(int)offsetof(ChartingState_obj,tab_group_note),HX_("tab_group_note",1c,75,04,82)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_naltAnim),HX_("check_naltAnim",c3,02,1a,86)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,writingNotes),HX_("writingNotes",c5,c2,9a,1c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,doSnapShit),HX_("doSnapShit",d5,55,02,7a)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,diff),HX_("diff",05,5c,69,42)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,changeIndex),HX_("changeIndex",82,43,da,e3)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,currentBPM),HX_("currentBPM",26,68,25,c7)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,lastBPM),HX_("lastBPM",29,ea,9f,d7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,updateFrame),HX_("updateFrame",64,e1,1b,ec)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,lastUpdatedSection),HX_("lastUpdatedSection",e0,c1,dd,e5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,shownNotes),HX_("shownNotes",b0,2d,1a,63)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,snapSelection),HX_("snapSelection",a2,68,82,ba)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,selectedBoxes),HX_("selectedBoxes",de,ca,40,ad)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,waitingForRelease),HX_("waitingForRelease",ab,09,c5,09)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,selectBox),HX_("selectBox",6f,60,fd,8d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,copiedNotes),HX_("copiedNotes",5d,6e,3c,8c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,pastedNotes),HX_("pastedNotes",d0,74,74,81)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,deletedNotes),HX_("deletedNotes",a8,13,ac,60)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,selectInitialX),HX_("selectInitialX",70,96,c1,b8)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,selectInitialY),HX_("selectInitialY",71,96,c1,b8)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,lastAction),HX_("lastAction",ac,1e,21,e1)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(ChartingState_obj,curSelectedNoteObject),HX_("curSelectedNoteObject",2c,64,f7,86)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,daSpacing),HX_("daSpacing",86,9d,76,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::ChartingState */ ,(void *) &ChartingState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsFloat,(void *) &ChartingState_obj::lengthInSteps,HX_("lengthInSteps",3c,ed,41,db)},
	{::hx::fsFloat,(void *) &ChartingState_obj::lengthInBeats,HX_("lengthInBeats",d2,d7,84,07)},
	{::hx::fsInt,(void *) &ChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ChartingState_obj::_song,HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /*  ::HealthIcon */ ,(void *) &ChartingState_obj::leftIcon,HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::HealthIcon */ ,(void *) &ChartingState_obj::rightIcon,HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsString,(void *) &ChartingState_obj::latestChartVersion,HX_("latestChartVersion",c1,89,05,09)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("_file",5b,ea,cc,f6),
	HX_("playClaps",07,a3,3c,69),
	HX_("snap",4a,56,57,4c),
	HX_("deezNuts",dc,76,82,94),
	HX_("UI_box",60,07,ac,43),
	HX_("UI_options",33,4b,47,19),
	HX_("speed",87,97,69,81),
	HX_("beatsShown",54,d5,f6,63),
	HX_("zoomFactor",42,c0,4e,b4),
	HX_("curSection",45,58,c1,68),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("writingNotesText",12,02,e7,d3),
	HX_("highlight",34,56,00,ed),
	HX_("GRID_SIZE",1a,98,25,c9),
	HX_("subDivisions",06,31,26,2c),
	HX_("defaultSnap",ab,4f,16,1e),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("gridBG",0b,ce,23,18),
	HX_("sectionRenderes",49,74,65,eb),
	HX_("typingShit",d7,01,ec,6a),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("tempBpm",2b,d8,ac,46),
	HX_("gridBlackLine",ad,65,ea,f8),
	HX_("vocals",5e,10,51,59),
	HX_("player2",b1,09,15,8a),
	HX_("player1",b0,09,15,8a),
	HX_("height",e7,07,4c,02),
	HX_("lastNote",68,31,53,dc),
	HX_("lines",ff,dd,01,75),
	HX_("claps",9b,75,58,48),
	HX_("snapText",17,3c,34,0d),
	HX_("camFollow",e0,6e,47,22),
	HX_("create",fc,66,0f,7c),
	HX_("texts",26,4b,99,0d),
	HX_("regenerateLines",f7,b6,ed,41),
	HX_("addGrid",87,19,a9,80),
	HX_("stepperDiv",c0,b0,21,f4),
	HX_("check_snap",61,04,2b,7c),
	HX_("listOfEvents",0e,f6,f0,91),
	HX_("currentSelectedEventName",31,61,08,a9),
	HX_("savedType",e1,b8,73,c7),
	HX_("savedValue",6a,1b,bb,d4),
	HX_("currentEventPosition",ea,92,90,06),
	HX_("containsName",0a,f4,74,a3),
	HX_("chartEvents",97,5a,ec,fc),
	HX_("Typeables",7f,44,75,ee),
	HX_("addEventsUI",ee,88,4b,f2),
	HX_("addOptionsUI",d1,b2,cc,81),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("stepperLength",d7,b0,3a,4b),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_CPUAltAnim",09,09,2a,93),
	HX_("check_playerAltAnim",82,25,63,ff),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("tab_group_note",1c,75,04,82),
	HX_("goToSection",62,3e,06,69),
	HX_("check_naltAnim",c3,02,1a,86),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("pasteNotesFromArray",01,3e,59,19),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("poggers",e7,c2,a8,25),
	HX_("stepStartTime",a3,f4,4d,c0),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("writingNotes",c5,c2,9a,1c),
	HX_("doSnapShit",d5,55,02,7a),
	HX_("diff",05,5c,69,42),
	HX_("changeIndex",82,43,da,e3),
	HX_("currentBPM",26,68,25,c7),
	HX_("lastBPM",29,ea,9f,d7),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("lastUpdatedSection",e0,c1,dd,e5),
	HX_("resizeEverything",87,a1,09,4d),
	HX_("shownNotes",b0,2d,1a,63),
	HX_("snapSelection",a2,68,82,ba),
	HX_("selectedBoxes",de,ca,40,ad),
	HX_("waitingForRelease",ab,09,c5,09),
	HX_("selectBox",6f,60,fd,8d),
	HX_("copiedNotes",5d,6e,3c,8c),
	HX_("pastedNotes",d0,74,74,81),
	HX_("deletedNotes",a8,13,ac,60),
	HX_("selectInitialX",70,96,c1,b8),
	HX_("selectInitialY",71,96,c1,b8),
	HX_("lastAction",ac,1e,21,e1),
	HX_("update",09,86,05,87),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("copySection",b0,82,ec,b3),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("clearSection",d8,b7,56,39),
	HX_("clearSong",02,0c,19,c0),
	HX_("newSection",65,29,da,9a),
	HX_("recalculateAllSectionTimes",4f,b8,31,bc),
	HX_("shiftNotes",5f,c8,22,af),
	HX_("getSectionByTime",d3,a2,dd,1e),
	HX_("getNoteByTime",4c,ef,d1,0c),
	HX_("curSelectedNoteObject",2c,64,f7,86),
	HX_("addNote",b3,5a,47,85),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("daSpacing",86,9d,76,71),
	HX_("loadLevel",7e,61,9a,8d),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("loadJson",6e,13,08,b7),
	HX_("loadAutosave",72,3a,03,fe),
	HX_("autosaveSong",21,24,ac,67),
	HX_("saveLevel",07,1d,10,01),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lengthInSteps,"lengthInSteps");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lengthInBeats,"lengthInBeats");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_MARK_MEMBER_NAME(ChartingState_obj::_song,"_song");
	HX_MARK_MEMBER_NAME(ChartingState_obj::leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(ChartingState_obj::rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(ChartingState_obj::latestChartVersion,"latestChartVersion");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lengthInSteps,"lengthInSteps");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lengthInBeats,"lengthInBeats");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::_song,"_song");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::latestChartVersion,"latestChartVersion");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("lengthInSteps",3c,ed,41,db),
	HX_("lengthInBeats",d2,d7,84,07),
	HX_("lastSection",2f,ba,83,12),
	HX_("_song",b4,3f,69,ff),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("latestChartVersion",c1,89,05,09),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ChartingState",8d,e0,dd,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_68_boot)
HXDLIN(  68)		lengthInSteps = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_69_boot)
HXDLIN(  69)		lengthInBeats = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_82_boot)
HXDLIN(  82)		lastSection = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_141_boot)
HXDLIN( 141)		latestChartVersion = HX_("2",32,00,00,00);
            	}
}

