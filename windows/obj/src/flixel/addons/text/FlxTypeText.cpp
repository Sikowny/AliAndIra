// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_addons_text_TypeSound
#include <flixel/addons/text/TypeSound.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormatMarkerPair
#include <flixel/text/FlxTextFormatMarkerPair.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09182b6b580f8cf2_27_new,"flixel.addons.text.FlxTypeText","new",0x24edf2f3,"flixel.addons.text.FlxTypeText.new","flixel/addons/text/FlxTypeText.hx",27,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_195_start,"flixel.addons.text.FlxTypeText","start",0x9d61a1b5,"flixel.addons.text.FlxTypeText.start","flixel/addons/text/FlxTypeText.hx",195,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_230_applyMarkup,"flixel.addons.text.FlxTypeText","applyMarkup",0x7596b149,"flixel.addons.text.FlxTypeText.applyMarkup","flixel/addons/text/FlxTypeText.hx",230,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_241_insertBreakLines,"flixel.addons.text.FlxTypeText","insertBreakLines",0x530ffae6,"flixel.addons.text.FlxTypeText.insertBreakLines","flixel/addons/text/FlxTypeText.hx",241,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_283_erase,"flixel.addons.text.FlxTypeText","erase",0x8c731639,"flixel.addons.text.FlxTypeText.erase","flixel/addons/text/FlxTypeText.hx",283,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_319_resetText,"flixel.addons.text.FlxTypeText","resetText",0xe198a8ef,"flixel.addons.text.FlxTypeText.resetText","flixel/addons/text/FlxTypeText.hx",319,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_338_setTypingVariation,"flixel.addons.text.FlxTypeText","setTypingVariation",0x5d85e3a7,"flixel.addons.text.FlxTypeText.setTypingVariation","flixel/addons/text/FlxTypeText.hx",338,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_347_onComplete,"flixel.addons.text.FlxTypeText","onComplete",0xeb447ac5,"flixel.addons.text.FlxTypeText.onComplete","flixel/addons/text/FlxTypeText.hx",347,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_380_onErased,"flixel.addons.text.FlxTypeText","onErased",0xfbbc7fca,"flixel.addons.text.FlxTypeText.onErased","flixel/addons/text/FlxTypeText.hx",380,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_391_update,"flixel.addons.text.FlxTypeText","update",0x99170156,"flixel.addons.text.FlxTypeText.update","flixel/addons/text/FlxTypeText.hx",391,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_529_skip,"flixel.addons.text.FlxTypeText","skip",0x2e99348c,"flixel.addons.text.FlxTypeText.skip","flixel/addons/text/FlxTypeText.hx",529,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_543_loadDefaultSound,"flixel.addons.text.FlxTypeText","loadDefaultSound",0xf442cd21,"flixel.addons.text.FlxTypeText.loadDefaultSound","flixel/addons/text/FlxTypeText.hx",543,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_159_boot,"flixel.addons.text.FlxTypeText","boot",0x235fa23f,"flixel.addons.text.FlxTypeText.boot","flixel/addons/text/FlxTypeText.hx",159,0x9451ed7e)
namespace flixel{
namespace addons{
namespace text{

void FlxTypeText_obj::__construct(Float X,Float Y,int Width,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont){
            		int Size = __o_Size.Default(8);
            		bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_27_new)
HXLINE( 154)		this->_typeVarPercent = ((Float)0.5);
HXLINE( 149)		this->_typingVariation = false;
HXLINE( 144)		this->_cursorTimer = ((Float)0.0);
HXLINE( 139)		this->_waiting = false;
HXLINE( 134)		this->_erasing = false;
HXLINE( 129)		this->_typing = false;
HXLINE( 124)		this->_length = 0;
HXLINE( 119)		this->_waitTimer = ((Float)0.0);
HXLINE( 114)		this->_timer = ((Float)0.0);
HXLINE( 109)		this->_finalText = HX_("",00,00,00,00);
HXLINE(  94)		this->skipKeys = ::Array_obj< int >::__new(0);
HXLINE(  89)		this->finishSounds = false;
HXLINE(  82)		this->useDefaultSound = false;
HXLINE(  72)		this->paused = false;
HXLINE(  67)		this->waitTime = ((Float)1.0);
HXLINE(  62)		this->autoErase = false;
HXLINE(  57)		this->prefix = HX_("",00,00,00,00);
HXLINE(  52)		this->cursorBlinkSpeed = ((Float)0.5);
HXLINE(  47)		this->cursorCharacter = HX_("|",7c,00,00,00);
HXLINE(  42)		this->showCursor = false;
HXLINE(  37)		this->eraseDelay = ((Float)0.02);
HXLINE(  32)		this->delay = ((Float)0.05);
HXLINE( 179)		super::__construct(X,Y,Width,HX_("",00,00,00,00),Size,EmbeddedFont);
HXLINE( 180)		this->_finalText = Text;
            	}

Dynamic FlxTypeText_obj::__CreateEmpty() { return new FlxTypeText_obj; }

void *FlxTypeText_obj::_hx_vtable = 0;

Dynamic FlxTypeText_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTypeText_obj > _hx_result = new FlxTypeText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxTypeText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x752f90b6) {
		if (inClassId<=(int)0x55ec573d) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x55ec573d;
			}
		} else {
			return inClassId==(int)0x752f90b6;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxTypeText_obj::start( ::Dynamic Delay,::hx::Null< bool >  __o_ForceRestart,::hx::Null< bool >  __o_AutoErase,::Array< int > SkipKeys, ::Dynamic Callback){
            		bool ForceRestart = __o_ForceRestart.Default(false);
            		bool AutoErase = __o_AutoErase.Default(false);
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_195_start)
HXLINE( 196)		if (::hx::IsNotNull( Delay )) {
HXLINE( 198)			this->delay = ( (Float)(Delay) );
            		}
HXLINE( 201)		this->_typing = true;
HXLINE( 202)		this->_erasing = false;
HXLINE( 203)		this->paused = false;
HXLINE( 204)		this->_waiting = false;
HXLINE( 206)		if (ForceRestart) {
HXLINE( 208)			this->set_text(HX_("",00,00,00,00));
HXLINE( 209)			this->_length = 0;
            		}
HXLINE( 212)		this->autoErase = AutoErase;
HXLINE( 214)		if (::hx::IsNotNull( SkipKeys )) {
HXLINE( 216)			this->skipKeys = SkipKeys;
            		}
HXLINE( 219)		this->completeCallback = Callback;
HXLINE( 221)		this->insertBreakLines();
HXLINE( 223)		if (this->useDefaultSound) {
HXLINE( 225)			this->loadDefaultSound();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxTypeText_obj,start,(void))

 ::flixel::text::FlxText FlxTypeText_obj::applyMarkup(::String input,::Array< ::Dynamic> rules){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_230_applyMarkup)
HXLINE( 231)		this->super::applyMarkup(input,rules);
HXLINE( 232)		this->resetText(this->text);
HXLINE( 233)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


void FlxTypeText_obj::insertBreakLines(){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_241_insertBreakLines)
HXLINE( 242)		::String saveText = this->text;
HXLINE( 244)		int last = this->_finalText.length;
HXLINE( 245)		int n0 = 0;
HXLINE( 246)		int n1 = 0;
HXLINE( 248)		while(true){
HXLINE( 250)			last = this->_finalText.substr(0,last).lastIndexOf(HX_(" ",20,00,00,00),null());
HXLINE( 252)			if ((last <= 0)) {
HXLINE( 253)				goto _hx_goto_3;
            			}
HXLINE( 256)			this->set_text((this->prefix + this->_finalText));
HXLINE( 257)			n0 = this->textField->get_numLines();
HXLINE( 259)			::String nextText = (this->_finalText.substr(0,last) + HX_("\n",0a,00,00,00));
HXDLIN( 259)			::String nextText1 = (nextText + this->_finalText.substr((last + 1),this->_finalText.length));
HXLINE( 261)			this->set_text((this->prefix + nextText1));
HXLINE( 262)			n1 = this->textField->get_numLines();
HXLINE( 264)			if ((n0 == n1)) {
HXLINE( 266)				this->_finalText = nextText1;
            			}
            		}
            		_hx_goto_3:;
HXLINE( 270)		this->set_text(saveText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,insertBreakLines,(void))

void FlxTypeText_obj::erase( ::Dynamic Delay,::hx::Null< bool >  __o_ForceRestart,::Array< int > SkipKeys, ::Dynamic Callback){
            		bool ForceRestart = __o_ForceRestart.Default(false);
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_283_erase)
HXLINE( 284)		this->_erasing = true;
HXLINE( 285)		this->_typing = false;
HXLINE( 286)		this->paused = false;
HXLINE( 287)		this->_waiting = false;
HXLINE( 289)		if (::hx::IsNotNull( Delay )) {
HXLINE( 291)			this->eraseDelay = ( (Float)(Delay) );
            		}
HXLINE( 294)		if (ForceRestart) {
HXLINE( 296)			this->_length = this->_finalText.length;
HXLINE( 297)			this->set_text(this->_finalText);
            		}
HXLINE( 300)		if (::hx::IsNotNull( SkipKeys )) {
HXLINE( 302)			this->skipKeys = SkipKeys;
            		}
HXLINE( 305)		this->eraseCallback = Callback;
HXLINE( 307)		if (this->useDefaultSound) {
HXLINE( 309)			this->loadDefaultSound();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTypeText_obj,erase,(void))

void FlxTypeText_obj::resetText(::String Text){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_319_resetText)
HXLINE( 320)		this->set_text(HX_("",00,00,00,00));
HXLINE( 321)		this->_finalText = Text;
HXLINE( 322)		this->_typing = false;
HXLINE( 323)		this->_erasing = false;
HXLINE( 324)		this->paused = false;
HXLINE( 325)		this->_waiting = false;
HXLINE( 326)		this->_length = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypeText_obj,resetText,(void))

void FlxTypeText_obj::setTypingVariation(::hx::Null< Float >  __o_Amount,::hx::Null< bool >  __o_On){
            		Float Amount = __o_Amount.Default(((Float)0.5));
            		bool On = __o_On.Default(true);
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_338_setTypingVariation)
HXLINE( 339)		this->_typingVariation = On;
HXLINE( 340)		Float lowerBound;
HXDLIN( 340)		if ((Amount < 0)) {
HXLINE( 340)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 340)			lowerBound = Amount;
            		}
HXDLIN( 340)		Float _hx_tmp;
HXDLIN( 340)		if ((lowerBound > 1)) {
HXLINE( 340)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE( 340)			_hx_tmp = lowerBound;
            		}
HXDLIN( 340)		this->_typeVarPercent = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypeText_obj,setTypingVariation,(void))

void FlxTypeText_obj::onComplete(){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_347_onComplete)
HXLINE( 348)		this->_timer = ( (Float)(0) );
HXLINE( 349)		this->_typing = false;
HXLINE( 351)		if (this->useDefaultSound) {
HXLINE( 353)			 ::flixel::_hx_system::FlxSound _this = this->_sound;
HXDLIN( 353)			_this->cleanup(_this->autoDestroy,true);
            		}
            		else {
HXLINE( 355)			if (::hx::IsNotNull( this->sounds )) {
HXLINE( 357)				int _g = 0;
HXDLIN( 357)				::Array< ::Dynamic> _g1 = this->sounds;
HXDLIN( 357)				while((_g < _g1->length)){
HXLINE( 357)					 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 357)					_g = (_g + 1);
HXLINE( 359)					sound->cleanup(sound->autoDestroy,true);
            				}
            			}
            		}
HXLINE( 363)		if (::hx::IsNotNull( this->completeCallback )) {
HXLINE( 365)			this->completeCallback();
            		}
HXLINE( 368)		bool _hx_tmp;
HXDLIN( 368)		if (this->autoErase) {
HXLINE( 368)			_hx_tmp = (this->waitTime <= 0);
            		}
            		else {
HXLINE( 368)			_hx_tmp = false;
            		}
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 370)			this->_erasing = true;
            		}
            		else {
HXLINE( 372)			if (this->autoErase) {
HXLINE( 374)				this->_waitTimer = this->waitTime;
HXLINE( 375)				this->_waiting = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,onComplete,(void))

void FlxTypeText_obj::onErased(){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_380_onErased)
HXLINE( 381)		this->_timer = ( (Float)(0) );
HXLINE( 382)		this->_erasing = false;
HXLINE( 384)		if (::hx::IsNotNull( this->eraseCallback )) {
HXLINE( 386)			this->eraseCallback();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,onErased,(void))

void FlxTypeText_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_391_update)
HXLINE( 394)		bool _hx_tmp;
HXDLIN( 394)		bool _hx_tmp1;
HXDLIN( 394)		if (::hx::IsNotNull( this->skipKeys )) {
HXLINE( 394)			_hx_tmp1 = (this->skipKeys->length > 0);
            		}
            		else {
HXLINE( 394)			_hx_tmp1 = false;
            		}
HXDLIN( 394)		if (_hx_tmp1) {
HXLINE( 394)			_hx_tmp = ::flixel::FlxG_obj::keys->checkKeyArrayState(this->skipKeys,2);
            		}
            		else {
HXLINE( 394)			_hx_tmp = false;
            		}
HXDLIN( 394)		if (_hx_tmp) {
HXLINE( 396)			this->skip();
            		}
HXLINE( 400)		bool _hx_tmp2;
HXDLIN( 400)		if (this->_waiting) {
HXLINE( 400)			_hx_tmp2 = !(this->paused);
            		}
            		else {
HXLINE( 400)			_hx_tmp2 = false;
            		}
HXDLIN( 400)		if (_hx_tmp2) {
HXLINE( 402)			 ::flixel::addons::text::FlxTypeText _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 402)			_hx_tmp->_waitTimer = (_hx_tmp->_waitTimer - elapsed);
HXLINE( 404)			if ((this->_waitTimer <= 0)) {
HXLINE( 406)				this->_waiting = false;
HXLINE( 407)				this->_erasing = true;
            			}
            		}
HXLINE( 412)		bool _hx_tmp3;
HXDLIN( 412)		if (!(this->_waiting)) {
HXLINE( 412)			_hx_tmp3 = !(this->paused);
            		}
            		else {
HXLINE( 412)			_hx_tmp3 = false;
            		}
HXDLIN( 412)		if (_hx_tmp3) {
HXLINE( 414)			bool _hx_tmp;
HXDLIN( 414)			if ((this->_length < this->_finalText.length)) {
HXLINE( 414)				_hx_tmp = this->_typing;
            			}
            			else {
HXLINE( 414)				_hx_tmp = false;
            			}
HXDLIN( 414)			if (_hx_tmp) {
HXLINE( 416)				 ::flixel::addons::text::FlxTypeText _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 416)				_hx_tmp->_timer = (_hx_tmp->_timer + elapsed);
            			}
HXLINE( 419)			bool _hx_tmp1;
HXDLIN( 419)			if ((this->_length > 0)) {
HXLINE( 419)				_hx_tmp1 = this->_erasing;
            			}
            			else {
HXLINE( 419)				_hx_tmp1 = false;
            			}
HXDLIN( 419)			if (_hx_tmp1) {
HXLINE( 421)				 ::flixel::addons::text::FlxTypeText _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 421)				_hx_tmp->_timer = (_hx_tmp->_timer + elapsed);
            			}
            		}
HXLINE( 427)		bool _hx_tmp4;
HXDLIN( 427)		if (!(this->_typing)) {
HXLINE( 427)			_hx_tmp4 = this->_erasing;
            		}
            		else {
HXLINE( 427)			_hx_tmp4 = true;
            		}
HXDLIN( 427)		if (_hx_tmp4) {
HXLINE( 429)			bool _hx_tmp;
HXDLIN( 429)			if (this->_typing) {
HXLINE( 429)				_hx_tmp = (this->_timer >= this->delay);
            			}
            			else {
HXLINE( 429)				_hx_tmp = false;
            			}
HXDLIN( 429)			if (_hx_tmp) {
HXLINE( 431)				 ::flixel::addons::text::FlxTypeText _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 431)				int _hx_tmp1 = _hx_tmp->_length;
HXDLIN( 431)				_hx_tmp->_length = (_hx_tmp1 + ::Std_obj::_hx_int((this->_timer / this->delay)));
HXLINE( 432)				if ((this->_length > this->_finalText.length)) {
HXLINE( 433)					this->_length = this->_finalText.length;
            				}
            			}
HXLINE( 436)			bool _hx_tmp1;
HXDLIN( 436)			if (this->_erasing) {
HXLINE( 436)				_hx_tmp1 = (this->_timer >= this->eraseDelay);
            			}
            			else {
HXLINE( 436)				_hx_tmp1 = false;
            			}
HXDLIN( 436)			if (_hx_tmp1) {
HXLINE( 438)				 ::flixel::addons::text::FlxTypeText _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 438)				int _hx_tmp1 = _hx_tmp->_length;
HXDLIN( 438)				_hx_tmp->_length = (_hx_tmp1 - ::Std_obj::_hx_int((this->_timer / this->eraseDelay)));
HXLINE( 439)				if ((this->_length < 0)) {
HXLINE( 440)					this->_length = 0;
            				}
            			}
HXLINE( 443)			bool _hx_tmp2;
HXDLIN( 443)			bool _hx_tmp3;
HXDLIN( 443)			if (this->_typing) {
HXLINE( 443)				_hx_tmp3 = (this->_timer >= this->delay);
            			}
            			else {
HXLINE( 443)				_hx_tmp3 = false;
            			}
HXDLIN( 443)			if (!(_hx_tmp3)) {
HXLINE( 443)				if (this->_erasing) {
HXLINE( 443)					_hx_tmp2 = (this->_timer >= this->eraseDelay);
            				}
            				else {
HXLINE( 443)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 443)				_hx_tmp2 = true;
            			}
HXDLIN( 443)			if (_hx_tmp2) {
HXLINE( 445)				if (this->_typingVariation) {
HXLINE( 447)					if (this->_typing) {
HXLINE( 449)						this->_timer = ::flixel::FlxG_obj::random->_hx_float(((-(this->delay) * this->_typeVarPercent) / ( (Float)(2) )),((this->delay * this->_typeVarPercent) / ( (Float)(2) )),null());
            					}
            					else {
HXLINE( 453)						this->_timer = ::flixel::FlxG_obj::random->_hx_float(((-(this->eraseDelay) * this->_typeVarPercent) / ( (Float)(2) )),((this->eraseDelay * this->_typeVarPercent) / ( (Float)(2) )),null());
            					}
            				}
            				else {
HXLINE( 458)					 ::flixel::addons::text::FlxTypeText _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 458)					_hx_tmp->_timer = ::hx::Mod(_hx_tmp->_timer,this->delay);
            				}
HXLINE( 461)				bool _hx_tmp;
HXDLIN( 461)				if (::hx::IsNotNull( this->sounds )) {
HXLINE( 461)					_hx_tmp = !(this->useDefaultSound);
            				}
            				else {
HXLINE( 461)					_hx_tmp = false;
            				}
HXDLIN( 461)				if (_hx_tmp) {
HXLINE( 463)					if (!(this->finishSounds)) {
HXLINE( 465)						int _g = 0;
HXDLIN( 465)						::Array< ::Dynamic> _g1 = this->sounds;
HXDLIN( 465)						while((_g < _g1->length)){
HXLINE( 465)							 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 465)							_g = (_g + 1);
HXLINE( 467)							sound->cleanup(sound->autoDestroy,true);
            						}
            					}
HXLINE( 471)					::flixel::FlxG_obj::random->getObject_flixel_system_FlxSound(this->sounds,null(),null(),null())->play(!(this->finishSounds),null(),null());
            				}
            				else {
HXLINE( 473)					if (this->useDefaultSound) {
HXLINE( 475)						this->_sound->play(!(this->finishSounds),null(),null());
            					}
            				}
            			}
            		}
HXLINE( 481)		::String _hx_tmp5 = this->prefix;
HXDLIN( 481)		::flixel::addons::text::FlxTypeText_obj::helperString = (_hx_tmp5 + this->_finalText.substr(0,this->_length));
HXLINE( 484)		if (this->showCursor) {
HXLINE( 486)			 ::flixel::addons::text::FlxTypeText _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 486)			_hx_tmp->_cursorTimer = (_hx_tmp->_cursorTimer + elapsed);
HXLINE( 489)			bool isBreakLine = ((this->prefix + this->_finalText).charAt(::flixel::addons::text::FlxTypeText_obj::helperString.length) == HX_("\n",0a,00,00,00));
HXLINE( 491)			bool _hx_tmp1;
HXDLIN( 491)			if ((this->_cursorTimer > (this->cursorBlinkSpeed / ( (Float)(2) )))) {
HXLINE( 491)				_hx_tmp1 = !(isBreakLine);
            			}
            			else {
HXLINE( 491)				_hx_tmp1 = false;
            			}
HXDLIN( 491)			if (_hx_tmp1) {
HXLINE( 493)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::flixel::addons::text::FlxTypeText >();
HXDLIN( 493)				::String _hx_tmp1 = ::flixel::addons::text::FlxTypeText_obj::helperString;
HXDLIN( 493)				::flixel::addons::text::FlxTypeText_obj::helperString = (_hx_tmp1 + this->cursorCharacter.charAt(0));
            			}
HXLINE( 496)			if ((this->_cursorTimer > this->cursorBlinkSpeed)) {
HXLINE( 498)				this->_cursorTimer = ( (Float)(0) );
            			}
            		}
HXLINE( 503)		if ((::flixel::addons::text::FlxTypeText_obj::helperString != this->text)) {
HXLINE( 505)			this->set_text(::flixel::addons::text::FlxTypeText_obj::helperString);
HXLINE( 508)			bool _hx_tmp;
HXDLIN( 508)			bool _hx_tmp1;
HXDLIN( 508)			bool _hx_tmp2;
HXDLIN( 508)			if ((this->_length >= this->_finalText.length)) {
HXLINE( 508)				_hx_tmp2 = this->_typing;
            			}
            			else {
HXLINE( 508)				_hx_tmp2 = false;
            			}
HXDLIN( 508)			if (_hx_tmp2) {
HXLINE( 508)				_hx_tmp1 = !(this->_waiting);
            			}
            			else {
HXLINE( 508)				_hx_tmp1 = false;
            			}
HXDLIN( 508)			if (_hx_tmp1) {
HXLINE( 508)				_hx_tmp = !(this->_erasing);
            			}
            			else {
HXLINE( 508)				_hx_tmp = false;
            			}
HXDLIN( 508)			if (_hx_tmp) {
HXLINE( 510)				this->onComplete();
            			}
HXLINE( 514)			bool _hx_tmp3;
HXDLIN( 514)			bool _hx_tmp4;
HXDLIN( 514)			bool _hx_tmp5;
HXDLIN( 514)			if ((this->_length == 0)) {
HXLINE( 514)				_hx_tmp5 = this->_erasing;
            			}
            			else {
HXLINE( 514)				_hx_tmp5 = false;
            			}
HXDLIN( 514)			if (_hx_tmp5) {
HXLINE( 514)				_hx_tmp4 = !(this->_typing);
            			}
            			else {
HXLINE( 514)				_hx_tmp4 = false;
            			}
HXDLIN( 514)			if (_hx_tmp4) {
HXLINE( 514)				_hx_tmp3 = !(this->_waiting);
            			}
            			else {
HXLINE( 514)				_hx_tmp3 = false;
            			}
HXDLIN( 514)			if (_hx_tmp3) {
HXLINE( 516)				this->onErased();
            			}
            		}
HXLINE( 520)		this->super::update(elapsed);
            	}


void FlxTypeText_obj::skip(){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_529_skip)
HXDLIN( 529)		bool _hx_tmp;
HXDLIN( 529)		if (!(this->_erasing)) {
HXDLIN( 529)			_hx_tmp = this->_waiting;
            		}
            		else {
HXDLIN( 529)			_hx_tmp = true;
            		}
HXDLIN( 529)		if (_hx_tmp) {
HXLINE( 531)			this->_length = 0;
HXLINE( 532)			this->_waiting = false;
            		}
            		else {
HXLINE( 534)			if (this->_typing) {
HXLINE( 536)				this->_length = this->_finalText.length;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,skip,(void))

void FlxTypeText_obj::loadDefaultSound(){
            	HX_GC_STACKFRAME(&_hx_pos_09182b6b580f8cf2_543_loadDefaultSound)
HXDLIN( 543)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 543)		this->_sound = _hx_tmp->load( ::flixel::addons::text::TypeSound_obj::__alloc( HX_CTX ,null(),null()),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,loadDefaultSound,(void))

::String FlxTypeText_obj::helperString;


::hx::ObjectPtr< FlxTypeText_obj > FlxTypeText_obj::__new(Float X,Float Y,int Width,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont) {
	::hx::ObjectPtr< FlxTypeText_obj > __this = new FlxTypeText_obj();
	__this->__construct(X,Y,Width,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

::hx::ObjectPtr< FlxTypeText_obj > FlxTypeText_obj::__alloc(::hx::Ctx *_hx_ctx,Float X,Float Y,int Width,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont) {
	FlxTypeText_obj *__this = (FlxTypeText_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypeText_obj), true, "flixel.addons.text.FlxTypeText"));
	*(void **)__this = FlxTypeText_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

FlxTypeText_obj::FlxTypeText_obj()
{
}

void FlxTypeText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypeText);
	HX_MARK_MEMBER_NAME(delay,"delay");
	HX_MARK_MEMBER_NAME(eraseDelay,"eraseDelay");
	HX_MARK_MEMBER_NAME(showCursor,"showCursor");
	HX_MARK_MEMBER_NAME(cursorCharacter,"cursorCharacter");
	HX_MARK_MEMBER_NAME(cursorBlinkSpeed,"cursorBlinkSpeed");
	HX_MARK_MEMBER_NAME(prefix,"prefix");
	HX_MARK_MEMBER_NAME(autoErase,"autoErase");
	HX_MARK_MEMBER_NAME(waitTime,"waitTime");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(sounds,"sounds");
	HX_MARK_MEMBER_NAME(useDefaultSound,"useDefaultSound");
	HX_MARK_MEMBER_NAME(finishSounds,"finishSounds");
	HX_MARK_MEMBER_NAME(skipKeys,"skipKeys");
	HX_MARK_MEMBER_NAME(completeCallback,"completeCallback");
	HX_MARK_MEMBER_NAME(eraseCallback,"eraseCallback");
	HX_MARK_MEMBER_NAME(_finalText,"_finalText");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_waitTimer,"_waitTimer");
	HX_MARK_MEMBER_NAME(_length,"_length");
	HX_MARK_MEMBER_NAME(_typing,"_typing");
	HX_MARK_MEMBER_NAME(_erasing,"_erasing");
	HX_MARK_MEMBER_NAME(_waiting,"_waiting");
	HX_MARK_MEMBER_NAME(_cursorTimer,"_cursorTimer");
	HX_MARK_MEMBER_NAME(_typingVariation,"_typingVariation");
	HX_MARK_MEMBER_NAME(_typeVarPercent,"_typeVarPercent");
	HX_MARK_MEMBER_NAME(_sound,"_sound");
	 ::flixel::text::FlxText_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypeText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(delay,"delay");
	HX_VISIT_MEMBER_NAME(eraseDelay,"eraseDelay");
	HX_VISIT_MEMBER_NAME(showCursor,"showCursor");
	HX_VISIT_MEMBER_NAME(cursorCharacter,"cursorCharacter");
	HX_VISIT_MEMBER_NAME(cursorBlinkSpeed,"cursorBlinkSpeed");
	HX_VISIT_MEMBER_NAME(prefix,"prefix");
	HX_VISIT_MEMBER_NAME(autoErase,"autoErase");
	HX_VISIT_MEMBER_NAME(waitTime,"waitTime");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(sounds,"sounds");
	HX_VISIT_MEMBER_NAME(useDefaultSound,"useDefaultSound");
	HX_VISIT_MEMBER_NAME(finishSounds,"finishSounds");
	HX_VISIT_MEMBER_NAME(skipKeys,"skipKeys");
	HX_VISIT_MEMBER_NAME(completeCallback,"completeCallback");
	HX_VISIT_MEMBER_NAME(eraseCallback,"eraseCallback");
	HX_VISIT_MEMBER_NAME(_finalText,"_finalText");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_waitTimer,"_waitTimer");
	HX_VISIT_MEMBER_NAME(_length,"_length");
	HX_VISIT_MEMBER_NAME(_typing,"_typing");
	HX_VISIT_MEMBER_NAME(_erasing,"_erasing");
	HX_VISIT_MEMBER_NAME(_waiting,"_waiting");
	HX_VISIT_MEMBER_NAME(_cursorTimer,"_cursorTimer");
	HX_VISIT_MEMBER_NAME(_typingVariation,"_typingVariation");
	HX_VISIT_MEMBER_NAME(_typeVarPercent,"_typeVarPercent");
	HX_VISIT_MEMBER_NAME(_sound,"_sound");
	 ::flixel::text::FlxText_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxTypeText_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"skip") ) { return ::hx::Val( skip_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return ::hx::Val( delay ); }
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return ::hx::Val( erase_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prefix") ) { return ::hx::Val( prefix ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"sounds") ) { return ::hx::Val( sounds ); }
		if (HX_FIELD_EQ(inName,"_timer") ) { return ::hx::Val( _timer ); }
		if (HX_FIELD_EQ(inName,"_sound") ) { return ::hx::Val( _sound ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { return ::hx::Val( _length ); }
		if (HX_FIELD_EQ(inName,"_typing") ) { return ::hx::Val( _typing ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"waitTime") ) { return ::hx::Val( waitTime ); }
		if (HX_FIELD_EQ(inName,"skipKeys") ) { return ::hx::Val( skipKeys ); }
		if (HX_FIELD_EQ(inName,"_erasing") ) { return ::hx::Val( _erasing ); }
		if (HX_FIELD_EQ(inName,"_waiting") ) { return ::hx::Val( _waiting ); }
		if (HX_FIELD_EQ(inName,"onErased") ) { return ::hx::Val( onErased_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoErase") ) { return ::hx::Val( autoErase ); }
		if (HX_FIELD_EQ(inName,"resetText") ) { return ::hx::Val( resetText_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eraseDelay") ) { return ::hx::Val( eraseDelay ); }
		if (HX_FIELD_EQ(inName,"showCursor") ) { return ::hx::Val( showCursor ); }
		if (HX_FIELD_EQ(inName,"_finalText") ) { return ::hx::Val( _finalText ); }
		if (HX_FIELD_EQ(inName,"_waitTimer") ) { return ::hx::Val( _waitTimer ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return ::hx::Val( onComplete_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyMarkup") ) { return ::hx::Val( applyMarkup_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"finishSounds") ) { return ::hx::Val( finishSounds ); }
		if (HX_FIELD_EQ(inName,"_cursorTimer") ) { return ::hx::Val( _cursorTimer ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"eraseCallback") ) { return ::hx::Val( eraseCallback ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cursorCharacter") ) { return ::hx::Val( cursorCharacter ); }
		if (HX_FIELD_EQ(inName,"useDefaultSound") ) { return ::hx::Val( useDefaultSound ); }
		if (HX_FIELD_EQ(inName,"_typeVarPercent") ) { return ::hx::Val( _typeVarPercent ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cursorBlinkSpeed") ) { return ::hx::Val( cursorBlinkSpeed ); }
		if (HX_FIELD_EQ(inName,"completeCallback") ) { return ::hx::Val( completeCallback ); }
		if (HX_FIELD_EQ(inName,"_typingVariation") ) { return ::hx::Val( _typingVariation ); }
		if (HX_FIELD_EQ(inName,"insertBreakLines") ) { return ::hx::Val( insertBreakLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadDefaultSound") ) { return ::hx::Val( loadDefaultSound_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setTypingVariation") ) { return ::hx::Val( setTypingVariation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTypeText_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"helperString") ) { outValue = ( helperString ); return true; }
	}
	return false;
}

::hx::Val FlxTypeText_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prefix") ) { prefix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sounds") ) { sounds=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sound") ) { _sound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_typing") ) { _typing=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"waitTime") ) { waitTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipKeys") ) { skipKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_erasing") ) { _erasing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_waiting") ) { _waiting=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoErase") ) { autoErase=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eraseDelay") ) { eraseDelay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showCursor") ) { showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_finalText") ) { _finalText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_waitTimer") ) { _waitTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"finishSounds") ) { finishSounds=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cursorTimer") ) { _cursorTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"eraseCallback") ) { eraseCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cursorCharacter") ) { cursorCharacter=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useDefaultSound") ) { useDefaultSound=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_typeVarPercent") ) { _typeVarPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cursorBlinkSpeed") ) { cursorBlinkSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"completeCallback") ) { completeCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_typingVariation") ) { _typingVariation=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxTypeText_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"helperString") ) { helperString=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void FlxTypeText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("delay",83,d7,26,d7));
	outFields->push(HX_("eraseDelay",bd,5c,83,f3));
	outFields->push(HX_("showCursor",b3,33,5d,a8));
	outFields->push(HX_("cursorCharacter",f3,a1,7a,94));
	outFields->push(HX_("cursorBlinkSpeed",01,63,0f,cc));
	outFields->push(HX_("prefix",92,d9,b6,ae));
	outFields->push(HX_("autoErase",f7,26,28,51));
	outFields->push(HX_("waitTime",22,31,df,55));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("sounds",c4,a8,2e,32));
	outFields->push(HX_("useDefaultSound",35,0f,08,0e));
	outFields->push(HX_("finishSounds",77,dd,a7,2f));
	outFields->push(HX_("skipKeys",13,d0,5b,bd));
	outFields->push(HX_("_finalText",04,c7,73,eb));
	outFields->push(HX_("_timer",06,07,1d,0c));
	outFields->push(HX_("_waitTimer",d1,48,0e,29));
	outFields->push(HX_("_length",85,a6,7e,0d));
	outFields->push(HX_("_typing",16,10,b1,c5));
	outFields->push(HX_("_erasing",24,31,91,5c));
	outFields->push(HX_("_waiting",0e,43,e0,18));
	outFields->push(HX_("_cursorTimer",10,c7,20,ff));
	outFields->push(HX_("_typingVariation",dd,98,2c,da));
	outFields->push(HX_("_typeVarPercent",97,5a,85,58));
	outFields->push(HX_("_sound",10,d4,b3,7c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTypeText_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FlxTypeText_obj,delay),HX_("delay",83,d7,26,d7)},
	{::hx::fsFloat,(int)offsetof(FlxTypeText_obj,eraseDelay),HX_("eraseDelay",bd,5c,83,f3)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,showCursor),HX_("showCursor",b3,33,5d,a8)},
	{::hx::fsString,(int)offsetof(FlxTypeText_obj,cursorCharacter),HX_("cursorCharacter",f3,a1,7a,94)},
	{::hx::fsFloat,(int)offsetof(FlxTypeText_obj,cursorBlinkSpeed),HX_("cursorBlinkSpeed",01,63,0f,cc)},
	{::hx::fsString,(int)offsetof(FlxTypeText_obj,prefix),HX_("prefix",92,d9,b6,ae)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,autoErase),HX_("autoErase",f7,26,28,51)},
	{::hx::fsFloat,(int)offsetof(FlxTypeText_obj,waitTime),HX_("waitTime",22,31,df,55)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxTypeText_obj,sounds),HX_("sounds",c4,a8,2e,32)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,useDefaultSound),HX_("useDefaultSound",35,0f,08,0e)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,finishSounds),HX_("finishSounds",77,dd,a7,2f)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(FlxTypeText_obj,skipKeys),HX_("skipKeys",13,d0,5b,bd)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTypeText_obj,completeCallback),HX_("completeCallback",9e,37,f5,50)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTypeText_obj,eraseCallback),HX_("eraseCallback",cb,94,e1,93)},
	{::hx::fsString,(int)offsetof(FlxTypeText_obj,_finalText),HX_("_finalText",04,c7,73,eb)},
	{::hx::fsFloat,(int)offsetof(FlxTypeText_obj,_timer),HX_("_timer",06,07,1d,0c)},
	{::hx::fsFloat,(int)offsetof(FlxTypeText_obj,_waitTimer),HX_("_waitTimer",d1,48,0e,29)},
	{::hx::fsInt,(int)offsetof(FlxTypeText_obj,_length),HX_("_length",85,a6,7e,0d)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,_typing),HX_("_typing",16,10,b1,c5)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,_erasing),HX_("_erasing",24,31,91,5c)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,_waiting),HX_("_waiting",0e,43,e0,18)},
	{::hx::fsFloat,(int)offsetof(FlxTypeText_obj,_cursorTimer),HX_("_cursorTimer",10,c7,20,ff)},
	{::hx::fsBool,(int)offsetof(FlxTypeText_obj,_typingVariation),HX_("_typingVariation",dd,98,2c,da)},
	{::hx::fsFloat,(int)offsetof(FlxTypeText_obj,_typeVarPercent),HX_("_typeVarPercent",97,5a,85,58)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(FlxTypeText_obj,_sound),HX_("_sound",10,d4,b3,7c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxTypeText_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &FlxTypeText_obj::helperString,HX_("helperString",df,e0,c7,51)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxTypeText_obj_sMemberFields[] = {
	HX_("delay",83,d7,26,d7),
	HX_("eraseDelay",bd,5c,83,f3),
	HX_("showCursor",b3,33,5d,a8),
	HX_("cursorCharacter",f3,a1,7a,94),
	HX_("cursorBlinkSpeed",01,63,0f,cc),
	HX_("prefix",92,d9,b6,ae),
	HX_("autoErase",f7,26,28,51),
	HX_("waitTime",22,31,df,55),
	HX_("paused",ae,40,84,ef),
	HX_("sounds",c4,a8,2e,32),
	HX_("useDefaultSound",35,0f,08,0e),
	HX_("finishSounds",77,dd,a7,2f),
	HX_("skipKeys",13,d0,5b,bd),
	HX_("completeCallback",9e,37,f5,50),
	HX_("eraseCallback",cb,94,e1,93),
	HX_("_finalText",04,c7,73,eb),
	HX_("_timer",06,07,1d,0c),
	HX_("_waitTimer",d1,48,0e,29),
	HX_("_length",85,a6,7e,0d),
	HX_("_typing",16,10,b1,c5),
	HX_("_erasing",24,31,91,5c),
	HX_("_waiting",0e,43,e0,18),
	HX_("_cursorTimer",10,c7,20,ff),
	HX_("_typingVariation",dd,98,2c,da),
	HX_("_typeVarPercent",97,5a,85,58),
	HX_("_sound",10,d4,b3,7c),
	HX_("start",62,74,0b,84),
	HX_("applyMarkup",b6,43,6b,f6),
	HX_("insertBreakLines",59,7d,50,01),
	HX_("erase",e6,e8,1c,73),
	HX_("resetText",1c,d6,e5,92),
	HX_("setTypingVariation",da,28,c2,7e),
	HX_("onComplete",f8,d4,7e,5d),
	HX_("onErased",3d,d7,db,25),
	HX_("update",09,86,05,87),
	HX_("skip",7f,16,55,4c),
	HX_("loadDefaultSound",94,4f,83,a2),
	::String(null()) };

static void FlxTypeText_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypeText_obj::helperString,"helperString");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypeText_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypeText_obj::helperString,"helperString");
};

#endif

::hx::Class FlxTypeText_obj::__mClass;

static ::String FlxTypeText_obj_sStaticFields[] = {
	HX_("helperString",df,e0,c7,51),
	::String(null())
};

void FlxTypeText_obj::__register()
{
	FlxTypeText_obj _hx_dummy;
	FlxTypeText_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.text.FlxTypeText",81,fd,be,a7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTypeText_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxTypeText_obj::__SetStatic;
	__mClass->mMarkFunc = FlxTypeText_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxTypeText_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTypeText_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTypeText_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypeText_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypeText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypeText_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxTypeText_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_159_boot)
HXDLIN( 159)		helperString = HX_("",00,00,00,00);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace text
